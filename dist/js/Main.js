// Generated by psc version 0.6.8
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showStringImpl(s) {
      return JSON.stringify(s);
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function showArrayImpl(f) {
      return function(xs) {
        var ss = [];
        for (var i = 0, l = xs.length; i < l; i++) {
          ss[i] = f(xs[i]);
        }
        return '[' + ss.join(',') + ']';
      };
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    
    function concatString(s1) {
      return function(s2) {
        return s1 + s2;
      };
    }
    ;
    var Unit = function (x) {
        return x;
    };
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Semigroupoid = function ($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
        this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
        this.id = id;
    };
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    
    /**
     *  | Addition and multiplication
     */
    var Semiring = function ($times, $plus, one, zero) {
        this["*"] = $times;
        this["+"] = $plus;
        this.one = one;
        this.zero = zero;
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var ModuloSemiring = function ($div, __superclass_Prelude$dotSemiring_0, mod) {
        this["/"] = $div;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
        this.mod = mod;
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var Ring = function ($minus, __superclass_Prelude$dotSemiring_0) {
        this["-"] = $minus;
        this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var Semigroup = function ($less$greater) {
        this["<>"] = $less$greater;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $greater$greater$greater = function (__dict_Semigroupoid_0) {
        return function (f) {
            return function (g) {
                return $less$less$less(__dict_Semigroupoid_0)(g)(f);
            };
        };
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $less$dollar$greater = function (dict) {
        return dict["<$>"];
    };
    var $colon = cons;
    var $div$eq = function (dict) {
        return dict["/="];
    };
    
    /**
     *  | Semiring with modulo operation and division where
     *  | ```a / b * b + (a `mod` b) = a```
     */
    var $div = function (dict) {
        return dict["/"];
    };
    
    /**
     *  | Addition, multiplication, and subtraction
     */
    var $minus = function (dict) {
        return dict["-"];
    };
    var $plus$plus = function (__dict_Semigroup_2) {
        return $less$greater(__dict_Semigroup_2);
    };
    
    /**
     *  | Addition and multiplication
     */
    var $plus = function (dict) {
        return dict["+"];
    };
    
    /**
     *  | Addition and multiplication
     */
    var $times = function (dict) {
        return dict["*"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $percent = numMod;
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    
    /**
     *  | Addition and multiplication
     */
    var zero = function (dict) {
        return dict.zero;
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var unit = {};
    var showString = new Show(showStringImpl);
    var showNumber = new Show(showNumberImpl);
    var showBoolean = new Show(function (_73) {
        if (_73) {
            return "true";
        };
        if (!_73) {
            return "false";
        };
        throw new Error("Failed pattern match");
    });
    var show = function (dict) {
        return dict.show;
    };
    var showArray = function (__dict_Show_3) {
        return new Show(showArrayImpl(show(__dict_Show_3)));
    };
    var semiringNumber = new Semiring(numMul, numAdd, 1, 0);
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var semigroupString = new Semigroup(concatString);
    var ringNumber = new Ring(numSub, function () {
        return semiringNumber;
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (__dict_Ring_6) {
        return function (a) {
            return $minus(__dict_Ring_6)(zero(__dict_Ring_6["__superclass_Prelude.Semiring_0"]()))(a);
        };
    };
    var moduloSemiringNumber = new ModuloSemiring(numDiv, function () {
        return semiringNumber;
    }, function (_74) {
        return function (_75) {
            return 0;
        };
    });
    var liftA1 = function (__dict_Applicative_8) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_8["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_8)(f))(a);
            };
        };
    };
    var id = function (dict) {
        return dict.id;
    };
    var functorArr = new Functor($less$less$less(semigroupoidArr));
    
    /**
     *  | Flips the order of the arguments to a function of two arguments.
     */
    var flip = function (f) {
        return function (b) {
            return function (a) {
                return f(a)(b);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    
    /**
     *  | Returns its first argument and ignores its second.
     */
    var $$const = function (_68) {
        return function (_69) {
            return _68;
        };
    };
    var $$void = function (__dict_Functor_10) {
        return function (fa) {
            return $less$dollar$greater(__dict_Functor_10)($$const(unit))(fa);
        };
    };
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _677 = compare(__dict_Ord_12)(a1)(a2);
                if (_677 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _678 = compare(__dict_Ord_13)(a1)(a2);
                if (_678 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_14) {
        return function (a1) {
            return function (a2) {
                var _679 = compare(__dict_Ord_14)(a1)(a2);
                if (_679 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var categoryArr = new Category(function () {
        return semigroupoidArr;
    }, function (x) {
        return x;
    });
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_16) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(f)(function (_3) {
                    return $greater$greater$eq(__dict_Monad_16["__superclass_Prelude.Bind_1"]())(a)(function (_2) {
                        return $$return(__dict_Monad_16)(_3(_2));
                    });
                });
            };
        };
    };
    return {
        Unit: Unit, 
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        Semigroup: Semigroup, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Ring: Ring, 
        ModuloSemiring: ModuloSemiring, 
        Semiring: Semiring, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        Category: Category, 
        Semigroupoid: Semigroupoid, 
        unit: unit, 
        "++": $plus$plus, 
        "<>": $less$greater, 
        not: not, 
        "&&": $amp$amp, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "/=": $div$eq, 
        "==": $eq$eq, 
        negate: negate, 
        "%": $percent, 
        "-": $minus, 
        "/": $div, 
        "*": $times, 
        zero: zero, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        "void": $$void, 
        "<$>": $less$dollar$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        id: id, 
        ">>>": $greater$greater$greater, 
        "<<<": $less$less$less, 
        "const": $$const, 
        flip: flip, 
        semigroupoidArr: semigroupoidArr, 
        categoryArr: categoryArr, 
        showString: showString, 
        showBoolean: showBoolean, 
        showNumber: showNumber, 
        showArray: showArray, 
        functorArr: functorArr, 
        semiringNumber: semiringNumber, 
        ringNumber: ringNumber, 
        moduloSemiringNumber: moduloSemiringNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        boolLikeBoolean: boolLikeBoolean, 
        semigroupString: semigroupString
    };
})();
var PS = PS || {};
PS.Network_XHR_Types = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var NoBody = (function () {
        function NoBody() {

        };
        NoBody.value = new NoBody();
        return NoBody;
    })();
    var RawBody = (function () {
        function RawBody(value0) {
            this.value0 = value0;
        };
        RawBody.create = function (value0) {
            return new RawBody(value0);
        };
        return RawBody;
    })();
    var UrlEncoded = (function () {
        function UrlEncoded(value0) {
            this.value0 = value0;
        };
        UrlEncoded.create = function (value0) {
            return new UrlEncoded(value0);
        };
        return UrlEncoded;
    })();
    var Multipart = (function () {
        function Multipart(value0) {
            this.value0 = value0;
        };
        Multipart.create = function (value0) {
            return new Multipart(value0);
        };
        return Multipart;
    })();
    return {
        NoBody: NoBody, 
        RawBody: RawBody, 
        UrlEncoded: UrlEncoded, 
        Multipart: Multipart
    };
})();
var PS = PS || {};
PS.Global = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function readInt(radix) {
    return function(n) {
      return parseInt(n, radix);
    };
  }
  ;
    return {
        readInt: readInt, 
        isNaN: isNaN
    };
})();
var PS = PS || {};
PS.Data_Function = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function runFn2(fn) {
      return function(a) {
        return function(b) {
          return fn(a, b);
        };
      };
    }
    ;
    
    function runFn3(fn) {
      return function(a) {
        return function(b) {
          return function(c) {
            return fn(a, b, c);
          };
        };
      };
    }
    ;
    return {
        runFn3: runFn3, 
        runFn2: runFn2
    };
})();
var PS = PS || {};
PS.Data_Foreign_EasyFFI = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function unsafeForeignProcedure(args) {  return function (stmt) {    return Function(wrap(args.slice()))();    function wrap() {      return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';    }  };};
    var unsafeForeignFunction = function (args) {
        return function (expr) {
            return unsafeForeignProcedure(args)("return " + (expr + ";"));
        };
    };
    return {
        unsafeForeignProcedure: unsafeForeignProcedure, 
        unsafeForeignFunction: unsafeForeignFunction
    };
})();
var PS = PS || {};
PS.Graphics_D3_Util = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    
    /**
     *  Reversed function application, useful for applying extended monadic chains
     *  to already-obtained values
     */
    var $dot$dot$dot = Prelude.flip(Prelude["$"]);
    
    /**
     *  Syntactic sugar to make chained monadic statements look similar to the
     *  "fluid interface" style of chained method calls in JavaScript
     */
    var $dot$dot = Prelude[">>="];
    var max = Data_Foreign_EasyFFI.unsafeForeignFunction([ "fn", "data" ])("d3.max(data, fn)");
    return {
        "...": $dot$dot$dot, 
        "..": $dot$dot, 
        max: max
    };
})();
var PS = PS || {};
PS.Control_Monad_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | The `MonadTrans` type class represents _monad transformers_.
     *  |
     *  | A monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which
     *  | takes a `Monad` as its first argument, and returns another `Monad`.
     *  |
     *  | This allows us to add additional effects to an existing monad. By iterating this
     *  | process, we create monad transformer _stacks_, which contain all of the effects
     *  | required for a particular computation.
     *  | 
     *  | The laws state that `lift` is a `Monad` morphism.
     *  |
     *  | Laws:
     *  |
     *  | - `lift (pure a) = pure a`
     *  | - `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`
     */
    var MonadTrans = function (lift) {
        this.lift = lift;
    };
    
    /**
     *  | The `MonadTrans` type class represents _monad transformers_.
     *  |
     *  | A monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which
     *  | takes a `Monad` as its first argument, and returns another `Monad`.
     *  |
     *  | This allows us to add additional effects to an existing monad. By iterating this
     *  | process, we create monad transformer _stacks_, which contain all of the effects
     *  | required for a particular computation.
     *  | 
     *  | The laws state that `lift` is a `Monad` morphism.
     *  |
     *  | Laws:
     *  |
     *  | - `lift (pure a) = pure a`
     *  | - `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`
     */
    var lift = function (dict) {
        return dict.lift;
    };
    return {
        MonadTrans: MonadTrans, 
        lift: lift
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    
    function runPure(f) {
      return f();
    }
    ;
    
    function untilE(f) {
      return function() {
        while (!f());
        return {};
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        untilE: untilE, 
        runPure: runPure, 
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Control_Monad_ST = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Prelude = PS.Prelude;
    
    function newSTRef(val) {
      return function() {
        return { value: val };
      };
    }
    ;
    
    function readSTRef(ref) {
      return function() {
        return ref.value;
      };
    }
    ;
    
    function writeSTRef(ref) {
      return function(a) {
        return function() {
          return ref.value = a;
        };
      };
    }
    ;
    return {
        writeSTRef: writeSTRef, 
        readSTRef: readSTRef, 
        newSTRef: newSTRef
    };
})();
var PS = PS || {};
PS.Graphics_D3_Selection = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    /**
     *  The class of types which element attribute values can have (numbers and strings)
     */
    var AttrValue = {};
    
    /**
     *  Selection-y things which can be appended to / inserted into
     */
    var Appendable = function (append) {
        this.append = append;
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var Existing = function (attr, attr$prime, attr$prime$prime, remove, style, style$prime, style$prime$prime, text, text$prime, text$prime$prime) {
        this.attr = attr;
        this["attr'"] = attr$prime;
        this["attr''"] = attr$prime$prime;
        this.remove = remove;
        this.style = style;
        this["style'"] = style$prime;
        this["style''"] = style$prime$prime;
        this.text = text;
        this["text'"] = text$prime;
        this["text''"] = text$prime$prime;
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var text$prime = function (dict) {
        return dict["text'"];
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var style = function (dict) {
        return dict.style;
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var remove = function (dict) {
        return dict.remove;
    };
    var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
    var rootSelect = ffi([ "selector", "" ])("d3.select(selector)");
    var select = ffi([ "selector", "selection", "" ])("selection.select(selector)");
    var selectAll = ffi([ "selector", "selection", "" ])("selection.selectAll(selector)");
    var unsafeAppend = ffi([ "tag", "selection", "" ])("selection.append(tag)");
    var unsafeAttr = function (__dict_AttrValue_19) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
    };
    var unsafeAttr$prime = function (__dict_AttrValue_20) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, val)");
    };
    var unsafeAttr$prime$prime = function (__dict_AttrValue_21) {
        return ffi([ "key", "val", "selection", "" ])("selection.attr(key, function (d, i) { return val(d)(i); })");
    };
    var unsafeRemove = ffi([ "selection", "" ])("selection.remove()");
    var unsafeStyle = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
    var unsafeStyle$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, val)");
    var unsafeStyle$prime$prime = ffi([ "key", "val", "selection", "" ])("selection.style(key, function (d, i) { return val(d)(i); })");
    var unsafeText = ffi([ "text", "selection", "" ])("selection.text(text)");
    var unsafeText$prime = ffi([ "text", "selection", "" ])("selection.text(text)");
    var unsafeText$prime$prime = ffi([ "text", "selection", "" ])("selection.text(function (d, i) { return text(d)(i); })");
    var existingSelection = new Existing(function (__dict_AttrValue_28) {
        return unsafeAttr(__dict_AttrValue_28);
    }, function (__dict_AttrValue_29) {
        return unsafeAttr$prime(__dict_AttrValue_29);
    }, function (__dict_AttrValue_30) {
        return unsafeAttr$prime$prime(__dict_AttrValue_30);
    }, unsafeRemove, unsafeStyle, unsafeStyle$prime, unsafeStyle$prime$prime, unsafeText, unsafeText$prime, unsafeText$prime$prime);
    var enter = ffi([ "update", "" ])("update.enter()");
    var bind = ffi([ "array", "selection", "" ])("selection.data(array)");
    var attrValString = AttrValue;
    var attrValNumber = AttrValue;
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var attr$prime$prime = function (dict) {
        return dict["attr''"];
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var attr$prime = function (dict) {
        return dict["attr'"];
    };
    
    /**
     *  Selection-y things that contain existing DOM elements
     */
    var attr = function (dict) {
        return dict.attr;
    };
    var appendableSelection = new Appendable(unsafeAppend);
    var appendableEnter = new Appendable(unsafeAppend);
    
    /**
     *  Selection-y things which can be appended to / inserted into
     */
    var append = function (dict) {
        return dict.append;
    };
    return {
        Appendable: Appendable, 
        Existing: Existing, 
        AttrValue: AttrValue, 
        "text'": text$prime, 
        style: style, 
        "attr''": attr$prime$prime, 
        "attr'": attr$prime, 
        attr: attr, 
        remove: remove, 
        append: append, 
        enter: enter, 
        bind: bind, 
        selectAll: selectAll, 
        select: select, 
        rootSelect: rootSelect, 
        attrValNumber: attrValNumber, 
        attrValString: attrValString, 
        appendableSelection: appendableSelection, 
        appendableEnter: appendableEnter, 
        existingSelection: existingSelection
    };
})();
var PS = PS || {};
PS.Control_Monad_Cont_Trans = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    
    /**
     *  | The CPS monad transformer.
     *  |
     *  | This monad transformer extends the base monad with the operation `callCC`.
     */
    var ContT = function (x) {
        return x;
    };
    
    /**
     *  | Run a computation in the `ContT` monad, by providing a continuation.
     */
    var runContT = function (_100) {
        return function (_101) {
            return _100(_101);
        };
    };
    var monadTransContT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_31) {
        return function (m) {
            return function (k) {
                return Prelude[">>="](__dict_Monad_31["__superclass_Prelude.Bind_1"]())(m)(k);
            };
        };
    });
    var functorContT = function (__dict_Monad_33) {
        return new Prelude.Functor(function (f) {
            return function (m) {
                return function (k) {
                    return runContT(m)(function (a) {
                        return k(f(a));
                    });
                };
            };
        });
    };
    var applyContT = function (__dict_Functor_35) {
        return function (__dict_Monad_36) {
            return new Prelude.Apply(function (f) {
                return function (v) {
                    return function (k) {
                        return runContT(f)(function (g) {
                            return runContT(v)(function (a) {
                                return k(g(a));
                            });
                        });
                    };
                };
            }, function () {
                return functorContT(__dict_Monad_36);
            });
        };
    };
    var bindContT = function (__dict_Monad_34) {
        return new Prelude.Bind(function (m) {
            return function (k) {
                return function (k$prime) {
                    return runContT(m)(function (a) {
                        return runContT(k(a))(k$prime);
                    });
                };
            };
        }, function () {
            return applyContT(((__dict_Monad_34["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(__dict_Monad_34);
        });
    };
    var applicativeContT = function (__dict_Functor_37) {
        return function (__dict_Monad_38) {
            return new Prelude.Applicative(function () {
                return applyContT(__dict_Functor_37)(__dict_Monad_38);
            }, function (a) {
                return function (k) {
                    return k(a);
                };
            });
        };
    };
    var monadContT = function (__dict_Monad_32) {
        return new Prelude.Monad(function () {
            return applicativeContT(((__dict_Monad_32["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(__dict_Monad_32);
        }, function () {
            return bindContT(__dict_Monad_32);
        });
    };
    return {
        ContT: ContT, 
        runContT: runContT, 
        functorContT: functorContT, 
        applyContT: applyContT, 
        applicativeContT: applicativeContT, 
        bindContT: bindContT, 
        monadContT: monadContT, 
        monadTransContT: monadTransContT
    };
})();
var PS = PS || {};
PS.Control_Apply = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    /**
     *  | Combine two effectful actions, keeping only the result of the second.
     */
    var $times$greater = function (__dict_Apply_61) {
        return function (a) {
            return function (b) {
                return Prelude["<*>"](__dict_Apply_61)(Prelude["<$>"](__dict_Apply_61["__superclass_Prelude.Functor_0"]())(Prelude["const"](Prelude.id(Prelude.categoryArr)))(a))(b);
            };
        };
    };
    return {
        "*>": $times$greater
    };
})();
var PS = PS || {};
PS.Data_Either = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Left = (function () {
        function Left(value0) {
            this.value0 = value0;
        };
        Left.create = function (value0) {
            return new Left(value0);
        };
        return Left;
    })();
    
    /**
     *  | The `Either` type is used to represent a choice between two types of value.
     *  |
     *  | A common use case for `Either` is error handling, where `Left` is used to
     *  | carry an error value and `Right` is used to carry a success value.
     */
    var Right = (function () {
        function Right(value0) {
            this.value0 = value0;
        };
        Right.create = function (value0) {
            return new Right(value0);
        };
        return Right;
    })();
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Right` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Left y == Left y
     *  | ```
     */
    var functorEither = new Prelude.Functor(function (_123) {
        return function (_124) {
            if (_124 instanceof Left) {
                return new Left(_124.value0);
            };
            if (_124 instanceof Right) {
                return new Right(_123(_124.value0));
            };
            throw new Error("Failed pattern match");
        };
    });
    
    /**
     *  | Takes two functions and an `Either` value, if the value is a `Left` the
     *  | inner value is applied to the first function, if the value is a `Right`
     *  | the inner value is applied to the second function.
     *  |
     *  | ``` purescript
     *  | either f g (Left x) == f x
     *  | either f g (Right y) == g y
     *  | ```
     */
    var either = function (_120) {
        return function (_121) {
            return function (_122) {
                if (_122 instanceof Left) {
                    return _120(_122.value0);
                };
                if (_122 instanceof Right) {
                    return _121(_122.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | The `Apply` instance allows functions contained within a `Right` to
     *  | transform a value contained within a `Right` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Right f <*> Right x == Right (f x)
     *  | ```
     *  |
     *  | `Left` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Left f <*> Right x == Left x
     *  | Right f <*> Left y == Left y
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Either l a -> Either l b -> Either l c`:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> Right y == Right (f x y)
     *  | ```
     *  |
     *  | The `Left`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Left`
     *  | means the whole result becomes `Left` also, taking the first `Left` value
     *  | found:
     *  |
     *  | ``` purescript
     *  | f <$> Left x <*> Right y == Left x
     *  | f <$> Right x <*> Left y == Left y
     *  | f <$> Left x <*> Left y == Left x
     *  | ```
     */
    var applyEither = new Prelude.Apply(function (_125) {
        return function (_126) {
            if (_125 instanceof Left) {
                return new Left(_125.value0);
            };
            if (_125 instanceof Right) {
                return Prelude["<$>"](functorEither)(_125.value0)(_126);
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorEither;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Either` values and functions that
     *  | return an `Either` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Left x >>= f = Left x
     *  | Right x >>= f = f x
     *  | ```
     */
    var bindEither = new Prelude.Bind(either(function (e) {
        return function (_119) {
            return new Left(e);
        };
    })(function (a) {
        return function (f) {
            return f(a);
        };
    }), function () {
        return applyEither;
    });
    
    /**
     *  | The `Applicative` instance enables lifting of values into `Either` with the
     *  | `pure` or `return` function (`return` is an alias for `pure`):
     *  |
     *  | ``` purescript
     *  | pure x :: Either _ _ == Right x
     *  | return x :: Either _ _ == Right x
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
     *  | `pure` can be used to pass a mixture of `Either` and non-`Either` typed
     *  | values to a function that does not usually expect them, by using `pure`
     *  | for any value that is not already `Either` typed:
     *  |
     *  | ``` purescript
     *  | f <$> Right x <*> pure y == Right (f x y)
     *  | ```
     *  |
     *  | Even though `pure = Right` it is recommended to use `pure` in situations
     *  | like this as it allows the choice of `Applicative` to be changed later
     *  | without having to go through and replace `Right` with a new constructor.
     */
    var applicativeEither = new Prelude.Applicative(function () {
        return applyEither;
    }, Right.create);
    
    /**
     *  | The `Monad` instance guarantees that there are both `Applicative` and
     *  | `Bind` instances for `Either`. This also enables the `do` syntactic sugar:
     *  |
     *  | ``` purescript
     *  | do
     *  |   x' <- x
     *  |   y' <- y
     *  |   pure (f x' y')
     *  | ```
     *  |
     *  | Which is equivalent to:
     *  |
     *  | ``` purescript
     *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
     *  | ```
     */
    var monadEither = new Prelude.Monad(function () {
        return applicativeEither;
    }, function () {
        return bindEither;
    });
    return {
        Left: Left, 
        Right: Right, 
        either: either, 
        functorEither: functorEither, 
        applyEither: applyEither, 
        applicativeEither: applicativeEither, 
        bindEither: bindEither, 
        monadEither: monadEither
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    
    /**
     *  | The `Maybe` type is used to represent optional values and can be seen as
     *  | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
     *  | is the non-null value `x`.
     */
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    
    /**
     *  | Takes a default value, a function, and a `Maybe` value. If the `Maybe`
     *  | value is `Nothing` the default value is returned, otherwise the function
     *  | is applied to the value inside the `Just` and the result is returned.
     *  |
     *  | ``` purescript
     *  | maybe x f Nothing == x
     *  | maybe x f (Just y) == f y
     *  | ```
     */
    var maybe = function (_138) {
        return function (_139) {
            return function (_140) {
                if (_140 instanceof Nothing) {
                    return _138;
                };
                if (_140 instanceof Just) {
                    return _139(_140.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    
    /**
     *  | The `Functor` instance allows functions to transform the contents of a
     *  | `Just` with the `<$>` operator:
     *  |
     *  | ``` purescript
     *  | f <$> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing == Nothing
     *  | ```
     */
    var functorMaybe = new Prelude.Functor(function (_141) {
        return function (_142) {
            if (_142 instanceof Just) {
                return new Just(_141(_142.value0));
            };
            return Nothing.value;
        };
    });
    
    /**
     *  | Takes a default value, and a `Maybe` value. If the `Maybe` value is
     *  | `Nothing` the default value is returned, otherwise the value inside the
     *  | `Just` is returned.
     *  |
     *  | ``` purescript
     *  | fromMaybe x Nothing == x
     *  | fromMaybe x (Just y) == y
     *  | ```
     */
    var fromMaybe = function (a) {
        return maybe(a)(Prelude.id(Prelude.categoryArr));
    };
    
    /**
     *  | The `Eq` instance allows `Maybe` values to be checked for equality with
     *  | `==` and inequality with `/=` whenever there is an `Eq` instance for the
     *  | type the `Maybe` contains.
     */
    var eqMaybe = function (__dict_Eq_90) {
        return new Prelude.Eq(function (a) {
            return function (b) {
                return !Prelude["=="](eqMaybe(__dict_Eq_90))(a)(b);
            };
        }, function (_154) {
            return function (_155) {
                if (_154 instanceof Nothing && _155 instanceof Nothing) {
                    return true;
                };
                if (_154 instanceof Just && _155 instanceof Just) {
                    return Prelude["=="](__dict_Eq_90)(_154.value0)(_155.value0);
                };
                return false;
            };
        });
    };
    
    /**
     *  | The `Apply` instance allows functions contained within a `Just` to
     *  | transform a value contained within a `Just` using the `(<*>)` operator:
     *  |
     *  | ``` purescript
     *  | Just f <*> Just x == Just (f x)
     *  | ```
     *  |
     *  | `Nothing` values are left untouched:
     *  |
     *  | ``` purescript
     *  | Just f <*> Nothing == Nothing
     *  | Nothing <*> Just x == Nothing
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
     *  | pure function to take `Maybe`-typed arguments so `f :: a -> b -> c`
     *  | becomes `f :: Maybe a -> Maybe b -> Maybe c`:
     *  |
     *  | ``` purescript
     *  | f <$> Just x <*> Just y == Just (f x y)
     *  | ```
     *  |
     *  | The `Nothing`-preserving behaviour of both operators means the result of
     *  | an expression like the above but where any one of the values is `Nothing`
     *  | means the whole result becomes `Nothing` also:
     *  |
     *  | ``` purescript
     *  | f <$> Nothing <*> Just y == Nothing
     *  | f <$> Just x <*> Nothing == Nothing
     *  | f <$> Nothing <*> Nothing == Nothing
     *  | ```
     */
    var applyMaybe = new Prelude.Apply(function (_143) {
        return function (_144) {
            if (_143 instanceof Just) {
                return Prelude["<$>"](functorMaybe)(_143.value0)(_144);
            };
            if (_143 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return functorMaybe;
    });
    
    /**
     *  | The `Bind` instance allows sequencing of `Maybe` values and functions that
     *  | return a `Maybe` by using the `>>=` operator:
     *  |
     *  | ``` purescript
     *  | Just x >>= f = f x
     *  | Nothing >>= f = Nothing
     *  | ```
     */
    var bindMaybe = new Prelude.Bind(function (_147) {
        return function (_148) {
            if (_147 instanceof Just) {
                return _148(_147.value0);
            };
            if (_147 instanceof Nothing) {
                return Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    }, function () {
        return applyMaybe;
    });
    
    /**
     *  | The `Applicative` instance enables lifting of values into `Maybe` with the
     *  | `pure` or `return` function (`return` is an alias for `pure`):
     *  |
     *  | ``` purescript
     *  | pure x :: Maybe _ == Just x
     *  | return x :: Maybe _ == Just x
     *  | ```
     *  |
     *  | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
     *  | `pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed
     *  | values to a function that does not usually expect them, by using `pure`
     *  | for any value that is not already `Maybe` typed:
     *  |
     *  | ``` purescript
     *  | f <$> Just x <*> pure y == Just (f x y)
     *  | ```
     *  |
     *  | Even though `pure = Just` it is recommended to use `pure` in situations
     *  | like this as it allows the choice of `Applicative` to be changed later
     *  | without having to go through and replace `Just` with a new constructor.
     */
    var applicativeMaybe = new Prelude.Applicative(function () {
        return applyMaybe;
    }, Just.create);
    
    /**
     *  | The `Monad` instance guarantees that there are both `Applicative` and
     *  | `Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:
     *  |
     *  | ``` purescript
     *  | do
     *  |   x' <- x
     *  |   y' <- y
     *  |   pure (f x' y')
     *  | ```
     *  |
     *  | Which is equivalent to:
     *  |
     *  | ``` purescript
     *  | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
     *  | ```
     */
    var monadMaybe = new Prelude.Monad(function () {
        return applicativeMaybe;
    }, function () {
        return bindMaybe;
    });
    return {
        Nothing: Nothing, 
        Just: Just, 
        fromMaybe: fromMaybe, 
        maybe: maybe, 
        functorMaybe: functorMaybe, 
        applyMaybe: applyMaybe, 
        applicativeMaybe: applicativeMaybe, 
        bindMaybe: bindMaybe, 
        monadMaybe: monadMaybe, 
        eqMaybe: eqMaybe
    };
})();
var PS = PS || {};
PS.Data_Array = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Alt = PS.Control_Alt;
    var Control_Plus = PS.Control_Plus;
    var Control_Alternative = PS.Control_Alternative;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Prelude_Unsafe = PS.Prelude_Unsafe;
    function append (l1) {  return function (l2) {    return l1.concat(l2);  };};
    function reverse (l) {  return l.slice().reverse();};
    function concatMap (f) {  return function (arr) {    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      Array.prototype.push.apply(result, f(arr[i]));    }    return result;  };};
    function map (f) {  return function (arr) {    var l = arr.length;    var result = new Array(l);    for (var i = 0; i < l; i++) {      result[i] = f(arr[i]);    }    return result;  };};
    function filter (f) {  return function (arr) {    var n = 0;    var result = [];    for (var i = 0, l = arr.length; i < l; i++) {      if (f(arr[i])) {        result[n++] = arr[i];      }    }    return result;  };};
    function range (start) {  return function (end) {    var i = ~~start, e = ~~end;    var step = i > e ? -1 : 1;    var result = [i], n = 1;    while (i !== e) {      i += step;      result[n++] = i;    }    return result;  };};
    
    /**
     *  | Split an array into two parts:
     *  |
     *  | 1. the longest initial subarray for which all element satisfy the specified predicate
     *  | 2. the remaining elements
     *  |
     *  | For example,
     *  |
     *  | ```purescript
     *  | span (\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }
     *  | ```
     */
    var span = (function () {
        var go = function (__copy__174) {
            return function (__copy__175) {
                return function (__copy__176) {
                    var _174 = __copy__174;
                    var _175 = __copy__175;
                    var _176 = __copy__176;
                    tco: while (true) {
                        if (_176.length >= 1) {
                            var _719 = _176.slice(1);
                            if (_175(_176[0])) {
                                var __tco__174 = Prelude[":"](_176[0])(_174);
                                var __tco__175 = _175;
                                _174 = __tco__174;
                                _175 = __tco__175;
                                _176 = _719;
                                continue tco;
                            };
                        };
                        return {
                            init: reverse(_174), 
                            rest: _176
                        };
                    };
                };
            };
        };
        return go([  ]);
    })();
    
    /**
     *  | Create an array of one element
     */
    var singleton = function (a) {
        return [ a ];
    };
    var semigroupArray = new Prelude.Semigroup(append);
    
    /**
     *  | Apply a function to each element in an array, keeping only the results which
     *  | contain a value, creating a new array.
     */
    var mapMaybe = function (f) {
        return concatMap(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.maybe([  ])(singleton))(f));
    };
    
    /**
     *  | Group equal, consecutive elements of an array into arrays, using the specified
     *  | equivalence relation to detemine equality.
     */
    var groupBy = (function () {
        var go = function (__copy__171) {
            return function (__copy__172) {
                return function (__copy__173) {
                    var _171 = __copy__171;
                    var _172 = __copy__172;
                    var _173 = __copy__173;
                    tco: while (true) {
                        if (_173.length === 0) {
                            return reverse(_171);
                        };
                        if (_173.length >= 1) {
                            var _724 = _173.slice(1);
                            var sp = span(_172(_173[0]))(_724);
                            var __tco__171 = Prelude[":"](Prelude[":"](_173[0])(sp.init))(_171);
                            var __tco__172 = _172;
                            _171 = __tco__171;
                            _172 = __tco__172;
                            _173 = sp.rest;
                            continue tco;
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        return go([  ]);
    })();
    var functorArray = new Prelude.Functor(map);
    return {
        span: span, 
        groupBy: groupBy, 
        range: range, 
        filter: filter, 
        concatMap: concatMap, 
        reverse: reverse, 
        append: append, 
        mapMaybe: mapMaybe, 
        map: map, 
        singleton: singleton, 
        functorArray: functorArray, 
        semigroupArray: semigroupArray
    };
})();
var PS = PS || {};
PS.Data_Foreign = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Function = PS.Data_Function;
    var Data_Array = PS.Data_Array;
    var Data_Either = PS.Data_Either;
    
  function unsafeFromForeign(value) {
    return value;
  }
  ;
    
  function tagOf(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  }
  ;
    
  var isArray = Array.isArray || function(value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };
  ;
    
    /**
     *  | A type for runtime type errors
     */
    var TypeMismatch = (function () {
        function TypeMismatch(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        TypeMismatch.create = function (value0) {
            return function (value1) {
                return new TypeMismatch(value0, value1);
            };
        };
        return TypeMismatch;
    })();
    
    /**
     *  | Attempt to coerce a foreign value to an array.
     */
    var readArray = function (_179) {
        if (isArray(_179)) {
            return Prelude.pure(Data_Either.applicativeEither)(unsafeFromForeign(_179));
        };
        return new Data_Either.Left(new TypeMismatch("array", tagOf(_179)));
    };
    return {
        TypeMismatch: TypeMismatch, 
        readArray: readArray, 
        isArray: isArray, 
        tagOf: tagOf, 
        unsafeFromForeign: unsafeFromForeign
    };
})();
var PS = PS || {};
PS.Data_Array_ST = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Control_Monad_ST = PS.Control_Monad_ST;
    
  function runSTArray(f) {
    return f;
  };
    
  function emptySTArray() {
    return [];
  };
    
  function pushAllSTArrayImpl(arr, as) {
    return function(){
      return arr.push.apply(arr, as);
    };
  };
    
    /**
     *  | Append the values in an immutable array to the end of a mutable array.
     */
    var pushAllSTArray = Data_Function.runFn2(pushAllSTArrayImpl);
    
    /**
     *  | Append an element to the end of a mutable array.
     */
    var pushSTArray = function (arr) {
        return function (a) {
            return pushAllSTArray(arr)([ a ]);
        };
    };
    return {
        pushAllSTArray: pushAllSTArray, 
        pushSTArray: pushSTArray, 
        emptySTArray: emptySTArray, 
        runSTArray: runSTArray
    };
})();
var PS = PS || {};
PS.Data_Maybe_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    
    /**
     *  | A partial function that extracts the value from the `Just` data
     *  | constructor. Passing `Nothing` to `fromJust` will throw an error at
     *  | runtime.
     */
    var fromJust = function (_197) {
        if (_197 instanceof Data_Maybe.Just) {
            return _197.value0;
        };
        throw new Error("Failed pattern match");
    };
    return {
        fromJust: fromJust
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Monoid = function (__superclass_Prelude$dotSemigroup_0, mempty) {
        this["__superclass_Prelude.Semigroup_0"] = __superclass_Prelude$dotSemigroup_0;
        this.mempty = mempty;
    };
    var monoidArray = new Monoid(function () {
        return Data_Array.semigroupArray;
    }, [  ]);
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        Monoid: Monoid, 
        mempty: mempty, 
        monoidArray: monoidArray
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    
    /**
     *  | A simple product type for wrapping a pair of component values.
     */
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    
    /**
     *  | Allows `Tuple`s to be rendered as a string with `show` whenever there are
     *  | `Show` instances for both component types.
     */
    var showTuple = function (__dict_Show_117) {
        return function (__dict_Show_118) {
            return new Prelude.Show(function (_282) {
                return "Tuple (" + (Prelude.show(__dict_Show_117)(_282.value0) + (") (" + (Prelude.show(__dict_Show_118)(_282.value1) + ")")));
            });
        };
    };
    return {
        Tuple: Tuple, 
        showTuple: showTuple
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  }
  ;
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  }
  ;
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldr = function (dict) {
        return dict.foldr;
    };
    
    /**
     *  | Traverse a data structure, performing some effects encoded by an
     *  | `Applicative` functor at each value, ignoring the final result.
     *  |
     *  | For example:
     *  |
     *  | ```purescript
     *  | traverse_ print [1, 2, 3]
     *  | ```
     */
    var traverse_ = function (__dict_Applicative_269) {
        return function (__dict_Foldable_270) {
            return function (f) {
                return foldr(__dict_Foldable_270)(Prelude["<<<"](Prelude.semigroupoidArr)(Control_Apply["*>"](__dict_Applicative_269["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_269)(Prelude.unit));
            };
        };
    };
    
    /**
     *  | A version of `traverse_` with its arguments flipped.
     *  |
     *  | This can be useful when running an action written using do notation
     *  | for every element in a data structure:
     *  |
     *  | For example:
     *  |
     *  | ```purescript
     *  | for_ [1, 2, 3] \n -> do
     *  |   print n
     *  |   trace "squared is"
     *  |   print (n * n)
     *  | ```
     */
    var for_ = function (__dict_Applicative_271) {
        return function (__dict_Foldable_272) {
            return Prelude.flip(traverse_(__dict_Applicative_271)(__dict_Foldable_272));
        };
    };
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldl = function (dict) {
        return dict.foldl;
    };
    
    /**
     *  | Find the sum of the numeric values in a data structure.
     */
    var sum = function (__dict_Foldable_281) {
        return foldl(__dict_Foldable_281)(Prelude["+"](Prelude.semiringNumber))(0);
    };
    var foldableArray = new Foldable(function (__dict_Monoid_287) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_287["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_287))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    
    /**
     *  | `Foldable` represents data structures which can be _folded_.
     *  |
     *  | - `foldr` folds a structure from the right
     *  | - `foldl` folds a structure from the left
     *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
     */
    var foldMap = function (dict) {
        return dict.foldMap;
    };
    
    /**
     *  | Try to find an element in a data structure which satisfies a predicate.
     */
    var find = function (__dict_Foldable_295) {
        return function (p) {
            return function (f) {
                var _732 = foldMap(__dict_Foldable_295)(Data_Monoid.monoidArray)(function (x) {
                    var _731 = p(x);
                    if (_731) {
                        return [ x ];
                    };
                    if (!_731) {
                        return [  ];
                    };
                    throw new Error("Failed pattern match");
                })(f);
                if (_732.length >= 1) {
                    var _734 = _732.slice(1);
                    return new Data_Maybe.Just(_732[0]);
                };
                if (_732.length === 0) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        find: find, 
        sum: sum, 
        for_: for_, 
        traverse_: traverse_, 
        foldMap: foldMap, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_Traversable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Either = PS.Data_Either;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid_Additive = PS.Data_Monoid_Additive;
    var Data_Monoid_Dual = PS.Data_Monoid_Dual;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Monoid_Last = PS.Data_Monoid_Last;
    var Data_Monoid_Multiplicative = PS.Data_Monoid_Multiplicative;
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var Traversable = function (__superclass_Data$dotFoldable$dotFoldable_1, __superclass_Prelude$dotFunctor_0, sequence, traverse) {
        this["__superclass_Data.Foldable.Foldable_1"] = __superclass_Data$dotFoldable$dotFoldable_1;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
        this.sequence = sequence;
        this.traverse = traverse;
    };
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var traverse = function (dict) {
        return dict.traverse;
    };
    
    /**
     *  | `Traversable` represents data structures which can be _traversed_,
     *  | accumulating results and effects in some `Applicative` functor.
     *  |
     *  | - `traverse` runs an action for every element in a data structure,
     *  |   and accumulates the results.
     *  | - `sequence` runs the actions _contained_ in a data structure,
     *  |   and accumulates the results.
     *  |
     *  | The `traverse` and `sequence` functions should be compatible in the
     *  | following sense:
     *  |
     *  | - `traverse f xs = sequence (f <$> xs)`
     *  | - `sequence = traverse id` 
     *  | 
     *  | `Traversable` instances should also be compatible with the corresponding
     *  | `Foldable` instances, in the following sense:
     *  |
     *  | - `foldMap f = runConst <<< traverse (Const <<< f)`
     */
    var sequence = function (dict) {
        return dict.sequence;
    };
    var traversableArray = new Traversable(function () {
        return Data_Foldable.foldableArray;
    }, function () {
        return Data_Array.functorArray;
    }, function (__dict_Applicative_316) {
        return function (_463) {
            if (_463.length === 0) {
                return Prelude.pure(__dict_Applicative_316)([  ]);
            };
            if (_463.length >= 1) {
                var _737 = _463.slice(1);
                return Prelude["<*>"](__dict_Applicative_316["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_316["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_463[0]))(sequence(traversableArray)(__dict_Applicative_316)(_737));
            };
            throw new Error("Failed pattern match");
        };
    }, function (__dict_Applicative_315) {
        return function (_461) {
            return function (_462) {
                if (_462.length === 0) {
                    return Prelude.pure(__dict_Applicative_315)([  ]);
                };
                if (_462.length >= 1) {
                    var _741 = _462.slice(1);
                    return Prelude["<*>"](__dict_Applicative_315["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_315["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Prelude[":"])(_461(_462[0])))(traverse(traversableArray)(__dict_Applicative_315)(_461)(_741));
                };
                throw new Error("Failed pattern match");
            };
        };
    });
    return {
        Traversable: Traversable, 
        sequence: sequence, 
        traverse: traverse, 
        traversableArray: traversableArray
    };
})();
var PS = PS || {};
PS.Data_Map = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    
    /**
     *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
     */
    var Leaf = (function () {
        function Leaf() {

        };
        Leaf.value = new Leaf();
        return Leaf;
    })();
    
    /**
     *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
     */
    var Two = (function () {
        function Two(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        Two.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new Two(value0, value1, value2, value3);
                    };
                };
            };
        };
        return Two;
    })();
    
    /**
     *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
     */
    var Three = (function () {
        function Three(value0, value1, value2, value3, value4, value5, value6) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
            this.value6 = value6;
        };
        Three.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return function (value6) {
                                    return new Three(value0, value1, value2, value3, value4, value5, value6);
                                };
                            };
                        };
                    };
                };
            };
        };
        return Three;
    })();
    var TwoLeft = (function () {
        function TwoLeft(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoLeft(value0, value1, value2);
                };
            };
        };
        return TwoLeft;
    })();
    var TwoRight = (function () {
        function TwoRight(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoRight(value0, value1, value2);
                };
            };
        };
        return TwoRight;
    })();
    var ThreeLeft = (function () {
        function ThreeLeft(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeLeft;
    })();
    var ThreeMiddle = (function () {
        function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeMiddle.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeMiddle;
    })();
    var ThreeRight = (function () {
        function ThreeRight(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeRight(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeRight;
    })();
    var KickUp = (function () {
        function KickUp(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        KickUp.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new KickUp(value0, value1, value2, value3);
                    };
                };
            };
        };
        return KickUp;
    })();
    
    /**
     *  | Convert a map to an array of key/value pairs
     */
    var toList = function (_528) {
        if (_528 instanceof Leaf) {
            return [  ];
        };
        if (_528 instanceof Two) {
            return Prelude["++"](Data_Array.semigroupArray)(toList(_528.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_528.value1, _528.value2) ])(toList(_528.value3)));
        };
        if (_528 instanceof Three) {
            return Prelude["++"](Data_Array.semigroupArray)(toList(_528.value0))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_528.value1, _528.value2) ])(Prelude["++"](Data_Array.semigroupArray)(toList(_528.value3))(Prelude["++"](Data_Array.semigroupArray)([ new Data_Tuple.Tuple(_528.value4, _528.value5) ])(toList(_528.value6)))));
        };
        throw new Error("Failed pattern match");
    };
    var showMap = function (__dict_Show_437) {
        return function (__dict_Show_438) {
            return new Prelude.Show(function (m) {
                return "fromList " + Prelude.show(Prelude.showArray(Data_Tuple.showTuple(__dict_Show_437)(__dict_Show_438)))(toList(m));
            });
        };
    };
    
    /**
     *  | Lookup a value for the specified key
     */
    var lookup = function (__copy___dict_Ord_439) {
        return function (__copy__524) {
            return function (__copy__525) {
                var __dict_Ord_439 = __copy___dict_Ord_439;
                var _524 = __copy__524;
                var _525 = __copy__525;
                tco: while (true) {
                    if (_525 instanceof Leaf) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (_525 instanceof Two && Prelude["=="](__dict_Ord_439["__superclass_Prelude.Eq_0"]())(_524)(_525.value1)) {
                        return new Data_Maybe.Just(_525.value2);
                    };
                    if (_525 instanceof Two && Prelude["<"](__dict_Ord_439)(_524)(_525.value1)) {
                        var __tco___dict_Ord_439 = __dict_Ord_439;
                        var __tco__524 = _524;
                        var __tco__525 = _525.value0;
                        __dict_Ord_439 = __tco___dict_Ord_439;
                        _524 = __tco__524;
                        _525 = __tco__525;
                        continue tco;
                    };
                    if (_525 instanceof Two) {
                        var __tco___dict_Ord_439 = __dict_Ord_439;
                        var __tco__524 = _524;
                        var __tco__525 = _525.value3;
                        __dict_Ord_439 = __tco___dict_Ord_439;
                        _524 = __tco__524;
                        _525 = __tco__525;
                        continue tco;
                    };
                    if (_525 instanceof Three && Prelude["=="](__dict_Ord_439["__superclass_Prelude.Eq_0"]())(_524)(_525.value1)) {
                        return new Data_Maybe.Just(_525.value2);
                    };
                    if (_525 instanceof Three && Prelude["=="](__dict_Ord_439["__superclass_Prelude.Eq_0"]())(_524)(_525.value4)) {
                        return new Data_Maybe.Just(_525.value5);
                    };
                    if (_525 instanceof Three && Prelude["<"](__dict_Ord_439)(_524)(_525.value1)) {
                        var __tco___dict_Ord_439 = __dict_Ord_439;
                        var __tco__524 = _524;
                        var __tco__525 = _525.value0;
                        __dict_Ord_439 = __tco___dict_Ord_439;
                        _524 = __tco__524;
                        _525 = __tco__525;
                        continue tco;
                    };
                    if (_525 instanceof Three && (Prelude["<"](__dict_Ord_439)(_525.value1)(_524) && Prelude["<="](__dict_Ord_439)(_524)(_525.value4))) {
                        var __tco___dict_Ord_439 = __dict_Ord_439;
                        var __tco__524 = _524;
                        var __tco__525 = _525.value3;
                        __dict_Ord_439 = __tco___dict_Ord_439;
                        _524 = __tco__524;
                        _525 = __tco__525;
                        continue tco;
                    };
                    if (_525 instanceof Three) {
                        var __tco___dict_Ord_439 = __dict_Ord_439;
                        var __tco__524 = _524;
                        var __tco__525 = _525.value6;
                        __dict_Ord_439 = __tco___dict_Ord_439;
                        _524 = __tco__524;
                        _525 = __tco__525;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    
    /**
     *  | Get an array of the keys contained in a map
     */
    var keys = function (_529) {
        if (_529 instanceof Leaf) {
            return [  ];
        };
        if (_529 instanceof Two) {
            return Prelude["++"](Data_Array.semigroupArray)(keys(_529.value0))(Prelude["++"](Data_Array.semigroupArray)([ _529.value1 ])(keys(_529.value3)));
        };
        if (_529 instanceof Three) {
            return Prelude["++"](Data_Array.semigroupArray)(keys(_529.value0))(Prelude["++"](Data_Array.semigroupArray)([ _529.value1 ])(Prelude["++"](Data_Array.semigroupArray)(keys(_529.value3))(Prelude["++"](Data_Array.semigroupArray)([ _529.value4 ])(keys(_529.value6)))));
        };
        throw new Error("Failed pattern match");
    };
    var fromZipper = function (__copy___dict_Ord_441) {
        return function (__copy__526) {
            return function (__copy__527) {
                var __dict_Ord_441 = __copy___dict_Ord_441;
                var _526 = __copy__526;
                var _527 = __copy__527;
                tco: while (true) {
                    if (_526.length === 0) {
                        return _527;
                    };
                    if (_526.length >= 1) {
                        var _821 = _526.slice(1);
                        if (_526[0] instanceof TwoLeft) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__527 = new Two(_527, (_526[0]).value0, (_526[0]).value1, (_526[0]).value2);
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _526 = _821;
                            _527 = __tco__527;
                            continue tco;
                        };
                    };
                    if (_526.length >= 1) {
                        var _826 = _526.slice(1);
                        if (_526[0] instanceof TwoRight) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__527 = new Two((_526[0]).value0, (_526[0]).value1, (_526[0]).value2, _527);
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _526 = _826;
                            _527 = __tco__527;
                            continue tco;
                        };
                    };
                    if (_526.length >= 1) {
                        var _834 = _526.slice(1);
                        if (_526[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__527 = new Three(_527, (_526[0]).value0, (_526[0]).value1, (_526[0]).value2, (_526[0]).value3, (_526[0]).value4, (_526[0]).value5);
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _526 = _834;
                            _527 = __tco__527;
                            continue tco;
                        };
                    };
                    if (_526.length >= 1) {
                        var _842 = _526.slice(1);
                        if (_526[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__527 = new Three((_526[0]).value0, (_526[0]).value1, (_526[0]).value2, _527, (_526[0]).value3, (_526[0]).value4, (_526[0]).value5);
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _526 = _842;
                            _527 = __tco__527;
                            continue tco;
                        };
                    };
                    if (_526.length >= 1) {
                        var _850 = _526.slice(1);
                        if (_526[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_441 = __dict_Ord_441;
                            var __tco__527 = new Three((_526[0]).value0, (_526[0]).value1, (_526[0]).value2, (_526[0]).value3, (_526[0]).value4, (_526[0]).value5, _527);
                            __dict_Ord_441 = __tco___dict_Ord_441;
                            _526 = _850;
                            _527 = __tco__527;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    
    /**
     *  | Insert a key/value pair into a map
     */
    var insert = function (__dict_Ord_442) {
        var up = function (__copy___dict_Ord_443) {
            return function (__copy__538) {
                return function (__copy__539) {
                    var __dict_Ord_443 = __copy___dict_Ord_443;
                    var _538 = __copy__538;
                    var _539 = __copy__539;
                    tco: while (true) {
                        if (_538.length === 0) {
                            return new Two(_539.value0, _539.value1, _539.value2, _539.value3);
                        };
                        if (_538.length >= 1) {
                            var _865 = _538.slice(1);
                            if (_538[0] instanceof TwoLeft) {
                                return fromZipper(__dict_Ord_443)(_865)(new Three(_539.value0, _539.value1, _539.value2, _539.value3, (_538[0]).value0, (_538[0]).value1, (_538[0]).value2));
                            };
                        };
                        if (_538.length >= 1) {
                            var _874 = _538.slice(1);
                            if (_538[0] instanceof TwoRight) {
                                return fromZipper(__dict_Ord_443)(_874)(new Three((_538[0]).value0, (_538[0]).value1, (_538[0]).value2, _539.value0, _539.value1, _539.value2, _539.value3));
                            };
                        };
                        if (_538.length >= 1) {
                            var _886 = _538.slice(1);
                            if (_538[0] instanceof ThreeLeft) {
                                var __tco___dict_Ord_443 = __dict_Ord_443;
                                var __tco__539 = new KickUp(new Two(_539.value0, _539.value1, _539.value2, _539.value3), (_538[0]).value0, (_538[0]).value1, new Two((_538[0]).value2, (_538[0]).value3, (_538[0]).value4, (_538[0]).value5));
                                __dict_Ord_443 = __tco___dict_Ord_443;
                                _538 = _886;
                                _539 = __tco__539;
                                continue tco;
                            };
                        };
                        if (_538.length >= 1) {
                            var _898 = _538.slice(1);
                            if (_538[0] instanceof ThreeMiddle) {
                                var __tco___dict_Ord_443 = __dict_Ord_443;
                                var __tco__539 = new KickUp(new Two((_538[0]).value0, (_538[0]).value1, (_538[0]).value2, _539.value0), _539.value1, _539.value2, new Two(_539.value3, (_538[0]).value3, (_538[0]).value4, (_538[0]).value5));
                                __dict_Ord_443 = __tco___dict_Ord_443;
                                _538 = _898;
                                _539 = __tco__539;
                                continue tco;
                            };
                        };
                        if (_538.length >= 1) {
                            var _910 = _538.slice(1);
                            if (_538[0] instanceof ThreeRight) {
                                var __tco___dict_Ord_443 = __dict_Ord_443;
                                var __tco__539 = new KickUp(new Two((_538[0]).value0, (_538[0]).value1, (_538[0]).value2, (_538[0]).value3), (_538[0]).value4, (_538[0]).value5, new Two(_539.value0, _539.value1, _539.value2, _539.value3));
                                __dict_Ord_443 = __tco___dict_Ord_443;
                                _538 = _910;
                                _539 = __tco__539;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var down = function (__copy___dict_Ord_444) {
            return function (__copy__534) {
                return function (__copy__535) {
                    return function (__copy__536) {
                        return function (__copy__537) {
                            var __dict_Ord_444 = __copy___dict_Ord_444;
                            var _534 = __copy__534;
                            var _535 = __copy__535;
                            var _536 = __copy__536;
                            var _537 = __copy__537;
                            tco: while (true) {
                                if (_537 instanceof Leaf) {
                                    return up(__dict_Ord_444)(_534)(new KickUp(Leaf.value, _535, _536, Leaf.value));
                                };
                                if (_537 instanceof Two && Prelude["=="](__dict_Ord_444["__superclass_Prelude.Eq_0"]())(_535)(_537.value1)) {
                                    return fromZipper(__dict_Ord_444)(_534)(new Two(_537.value0, _535, _536, _537.value3));
                                };
                                if (_537 instanceof Two && Prelude["<"](__dict_Ord_444)(_535)(_537.value1)) {
                                    var __tco___dict_Ord_444 = __dict_Ord_444;
                                    var __tco__534 = Prelude[":"](new TwoLeft(_537.value1, _537.value2, _537.value3))(_534);
                                    var __tco__535 = _535;
                                    var __tco__536 = _536;
                                    var __tco__537 = _537.value0;
                                    __dict_Ord_444 = __tco___dict_Ord_444;
                                    _534 = __tco__534;
                                    _535 = __tco__535;
                                    _536 = __tco__536;
                                    _537 = __tco__537;
                                    continue tco;
                                };
                                if (_537 instanceof Two) {
                                    var __tco___dict_Ord_444 = __dict_Ord_444;
                                    var __tco__534 = Prelude[":"](new TwoRight(_537.value0, _537.value1, _537.value2))(_534);
                                    var __tco__535 = _535;
                                    var __tco__536 = _536;
                                    var __tco__537 = _537.value3;
                                    __dict_Ord_444 = __tco___dict_Ord_444;
                                    _534 = __tco__534;
                                    _535 = __tco__535;
                                    _536 = __tco__536;
                                    _537 = __tco__537;
                                    continue tco;
                                };
                                if (_537 instanceof Three && Prelude["=="](__dict_Ord_444["__superclass_Prelude.Eq_0"]())(_535)(_537.value1)) {
                                    return fromZipper(__dict_Ord_444)(_534)(new Three(_537.value0, _535, _536, _537.value3, _537.value4, _537.value5, _537.value6));
                                };
                                if (_537 instanceof Three && Prelude["=="](__dict_Ord_444["__superclass_Prelude.Eq_0"]())(_535)(_537.value4)) {
                                    return fromZipper(__dict_Ord_444)(_534)(new Three(_537.value0, _537.value1, _537.value2, _537.value3, _535, _536, _537.value6));
                                };
                                if (_537 instanceof Three && Prelude["<"](__dict_Ord_444)(_535)(_537.value1)) {
                                    var __tco___dict_Ord_444 = __dict_Ord_444;
                                    var __tco__534 = Prelude[":"](new ThreeLeft(_537.value1, _537.value2, _537.value3, _537.value4, _537.value5, _537.value6))(_534);
                                    var __tco__535 = _535;
                                    var __tco__536 = _536;
                                    var __tco__537 = _537.value0;
                                    __dict_Ord_444 = __tco___dict_Ord_444;
                                    _534 = __tco__534;
                                    _535 = __tco__535;
                                    _536 = __tco__536;
                                    _537 = __tco__537;
                                    continue tco;
                                };
                                if (_537 instanceof Three && (Prelude["<"](__dict_Ord_444)(_537.value1)(_535) && Prelude["<="](__dict_Ord_444)(_535)(_537.value4))) {
                                    var __tco___dict_Ord_444 = __dict_Ord_444;
                                    var __tco__534 = Prelude[":"](new ThreeMiddle(_537.value0, _537.value1, _537.value2, _537.value4, _537.value5, _537.value6))(_534);
                                    var __tco__535 = _535;
                                    var __tco__536 = _536;
                                    var __tco__537 = _537.value3;
                                    __dict_Ord_444 = __tco___dict_Ord_444;
                                    _534 = __tco__534;
                                    _535 = __tco__535;
                                    _536 = __tco__536;
                                    _537 = __tco__537;
                                    continue tco;
                                };
                                if (_537 instanceof Three) {
                                    var __tco___dict_Ord_444 = __dict_Ord_444;
                                    var __tco__534 = Prelude[":"](new ThreeRight(_537.value0, _537.value1, _537.value2, _537.value3, _537.value4, _537.value5))(_534);
                                    var __tco__535 = _535;
                                    var __tco__536 = _536;
                                    var __tco__537 = _537.value6;
                                    __dict_Ord_444 = __tco___dict_Ord_444;
                                    _534 = __tco__534;
                                    _535 = __tco__535;
                                    _536 = __tco__536;
                                    _537 = __tco__537;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_442)([  ]);
    };
    
    /**
     *  | An empty map
     */
    var empty = Leaf.value;
    
    /**
     *  | Create a map from an array of key/value pairs
     */
    var fromList = function (__dict_Ord_448) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (_520) {
                return insert(__dict_Ord_448)(_520.value0)(_520.value1)(m);
            };
        })(empty);
    };
    return {
        keys: keys, 
        fromList: fromList, 
        toList: toList, 
        lookup: lookup, 
        insert: insert, 
        empty: empty, 
        showMap: showMap
    };
})();
var PS = PS || {};
PS.Data_JSON = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Map = PS.Data_Map;
    var Data_Set = PS.Data_Set;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Function = PS.Data_Function;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array = PS.Data_Array;
    function jsonParseImpl (left, right, string) {    try       { return right(JSON.parse(string)); }    catch (e) { return left(e.toString()); }};
    function jsonToValueImpl (auxes, ctors) {    var left   = auxes.left;    var right  = auxes.right;    var either = auxes.either;    var insert = auxes.insert;    var empty  = auxes.empty;    var Null   = ctors.null;    var Number = ctors.number;    var Bool   = ctors.bool;    var String = ctors.string;    var Array  = ctors.array;    var Object = ctors.object;    var parse  = function(json) {        var typ    = Object.prototype.toString.call(json).slice(8,-1);         if        (typ === 'Number') {             return right(Number(json));        } else if (typ === 'Boolean') {             return right(Bool(json));        } else if (typ === 'String') {             return right(String(json));        } else if (typ === 'Null') {             return right(Null);        } else if (typ === 'Array') {             var ary = [];            for(var i = 0; i < json.length; i++) {                 either                     (function(l){return left(l)})                     (function(r){ary.push(r)})                     (parse(json[i]))             }             return right(Array(ary));        } else if (typ === 'Object') {            var obj = empty;            for(var k in json) {                 either                     (function(l){return left(l)})                     (function(r){obj = insert(k)(r)(obj)})                     (parse(json[k]));            }             return right(Object(obj));        } else {             return left('unknown type: ' + typ);        }   };   return parse;};
    var JObject = (function () {
        function JObject(value0) {
            this.value0 = value0;
        };
        JObject.create = function (value0) {
            return new JObject(value0);
        };
        return JObject;
    })();
    var JArray = (function () {
        function JArray(value0) {
            this.value0 = value0;
        };
        JArray.create = function (value0) {
            return new JArray(value0);
        };
        return JArray;
    })();
    var JString = (function () {
        function JString(value0) {
            this.value0 = value0;
        };
        JString.create = function (value0) {
            return new JString(value0);
        };
        return JString;
    })();
    var JNumber = (function () {
        function JNumber(value0) {
            this.value0 = value0;
        };
        JNumber.create = function (value0) {
            return new JNumber(value0);
        };
        return JNumber;
    })();
    var JBool = (function () {
        function JBool(value0) {
            this.value0 = value0;
        };
        JBool.create = function (value0) {
            return new JBool(value0);
        };
        return JBool;
    })();
    var JNull = (function () {
        function JNull() {

        };
        JNull.value = new JNull();
        return JNull;
    })();
    
    /**
     * ------------------------------------------------------------------------------
     */
    var FromJSON = function (parseJSON) {
        this.parseJSON = parseJSON;
    };
    var showValue = new Prelude.Show(function (_568) {
        if (_568 instanceof JObject) {
            return "JObject " + Prelude.show(Data_Map.showMap(Prelude.showString)(showValue))(_568.value0);
        };
        if (_568 instanceof JArray) {
            return "JArray " + Prelude.show(Prelude.showArray(showValue))(_568.value0);
        };
        if (_568 instanceof JString) {
            return "JString " + Prelude.show(Prelude.showString)(_568.value0);
        };
        if (_568 instanceof JNumber) {
            return "JNumber " + Prelude.show(Prelude.showNumber)(_568.value0);
        };
        if (_568 instanceof JBool) {
            return "JBool " + Prelude.show(Prelude.showBoolean)(_568.value0);
        };
        if (_568 instanceof JNull) {
            return "JNull";
        };
        throw new Error("Failed pattern match");
    });
    
    /**
     * ------------------------------------------------------------------------------
     */
    var parseJSON = function (dict) {
        return dict.parseJSON;
    };
    var $dot$colon = function (__dict_FromJSON_480) {
        return function (obj) {
            return function (key) {
                var _971 = Data_Map.lookup(Prelude.ordString)(key)(obj);
                if (_971 instanceof Data_Maybe.Nothing) {
                    return Data_Either.Left.create("key " + (Prelude.show(Prelude.showString)(key) + " not present"));
                };
                if (_971 instanceof Data_Maybe.Just) {
                    return parseJSON(__dict_FromJSON_480)(_971.value0);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var jsonToValue = function (s) {
        var insert$prime = Data_Map.insert(Prelude.ordString);
        var ctors = {
            "null": JNull.value, 
            number: JNumber.create, 
            bool: JBool.create, 
            string: JString.create, 
            array: JArray.create, 
            object: JObject.create
        };
        var auxes = {
            left: Data_Either.Left.create, 
            right: Data_Either.Right.create, 
            either: Data_Either.either, 
            insert: insert$prime, 
            empty: Data_Map.empty
        };
        return jsonParseImpl(Data_Either.Left.create, jsonToValueImpl(auxes, ctors), s);
    };
    var fail = Data_Either.Left.create;
    var numberFromJSON = new FromJSON(function (_572) {
        if (_572 instanceof JNumber) {
            return Prelude["return"](Data_Either.monadEither)(_572.value0);
        };
        return fail(Prelude.show(showValue)(_572) + " is not Number.");
    });
    var stringFromJSON = new FromJSON(function (_574) {
        if (_574 instanceof JString) {
            return Prelude["return"](Data_Either.monadEither)(_574.value0);
        };
        return fail(Prelude.show(showValue)(_574) + " is not String.");
    });
    var eitherDecode = function (__dict_FromJSON_493) {
        return function (s) {
            return Prelude[">>="](Data_Either.bindEither)(jsonToValue(s))(function (_29) {
                return parseJSON(__dict_FromJSON_493)(_29);
            });
        };
    };
    var decode = function (__dict_FromJSON_494) {
        return function (s) {
            var _978 = eitherDecode(__dict_FromJSON_494)(s);
            if (_978 instanceof Data_Either.Right) {
                return new Data_Maybe.Just(_978.value0);
            };
            if (_978 instanceof Data_Either.Left) {
                return Data_Maybe.Nothing.value;
            };
            throw new Error("Failed pattern match");
        };
    };
    var arrayFromJSON = function (__dict_FromJSON_496) {
        return new FromJSON(function (_575) {
            if (_575 instanceof JArray) {
                return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Prelude["<$>"](Data_Array.functorArray)(parseJSON(__dict_FromJSON_496))(_575.value0));
            };
            return fail(Prelude.show(showValue)(_575) + " is not [a].");
        });
    };
    return {
        JObject: JObject, 
        JArray: JArray, 
        JString: JString, 
        JNumber: JNumber, 
        JBool: JBool, 
        JNull: JNull, 
        FromJSON: FromJSON, 
        ".:": $dot$colon, 
        eitherDecode: eitherDecode, 
        decode: decode, 
        fail: fail, 
        parseJSON: parseJSON, 
        showValue: showValue, 
        numberFromJSON: numberFromJSON, 
        stringFromJSON: stringFromJSON, 
        arrayFromJSON: arrayFromJSON
    };
})();
var PS = PS || {};
PS.Data_Unfoldable = (function () {
    "use strict";
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Array_ST = PS.Data_Array_ST;
    var Prelude = PS.Prelude;
    var Control_Monad_ST = PS.Control_Monad_ST;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    
    /**
     *  | This class identifies data structures which can be _unfolded_,
     *  | generalizing `unfoldr` on arrays.
     *  |
     *  | The generating function `f` in `unfoldr f` in understood as follows:
     *  |
     *  | - If `f b` is `Nothing`, then `unfoldr f b` should be empty.
     *  | - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`
     *  |   appended to the result of `unfoldr f b1`.
     */
    var Unfoldable = function (unfoldr) {
        this.unfoldr = unfoldr;
    };
    
    /**
     *  | This class identifies data structures which can be _unfolded_,
     *  | generalizing `unfoldr` on arrays.
     *  |
     *  | The generating function `f` in `unfoldr f` in understood as follows:
     *  |
     *  | - If `f b` is `Nothing`, then `unfoldr f b` should be empty.
     *  | - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`
     *  |   appended to the result of `unfoldr f b1`.
     */
    var unfoldr = function (dict) {
        return dict.unfoldr;
    };
    var unfoldableArray = new Unfoldable(function (f) {
        return function (b) {
            return Control_Monad_Eff.runPure(Data_Array_ST.runSTArray(function __do() {
                var _36 = Data_Array_ST.emptySTArray();
                var _35 = Control_Monad_ST.newSTRef(b)();
                (function () {
                    while (!(function __do() {
                        var _34 = Control_Monad_ST.readSTRef(_35)();
                        return (function () {
                            var _986 = f(_34);
                            if (_986 instanceof Data_Maybe.Nothing) {
                                return Prelude["return"](Control_Monad_Eff.monadEff)(true);
                            };
                            if (_986 instanceof Data_Maybe.Just) {
                                return function __do() {
                                    Data_Array_ST.pushSTArray(_36)(_986.value0.value0)();
                                    Control_Monad_ST.writeSTRef(_35)(_986.value0.value1)();
                                    return false;
                                };
                            };
                            throw new Error("Failed pattern match");
                        })()();
                    })()) {

                    };
                    return {};
                })();
                return _36;
            }));
        };
    });
    return {
        Unfoldable: Unfoldable, 
        unfoldr: unfoldr, 
        unfoldableArray: unfoldableArray
    };
})();
var PS = PS || {};
PS.Data_Enum = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Data_Unfoldable = PS.Data_Unfoldable;
    var Data_Char = PS.Data_Char;
    var Data_Either = PS.Data_Either;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Array = PS.Data_Array;
    var Cardinality = function (x) {
        return x;
    };
    
    /**
     *  | Type class for enumerations. This should not be considered a part of a
     *  | numeric hierarchy, ala Haskell. Rather, this is a type class for small,
     *  | ordered sum types with statically-determined cardinality and the ability 
     *  | to easily compute successor and predecessor elements. e.g. `DayOfWeek`, etc.
     *  |
     *  | Laws:
     *  |
     *  | - ```succ firstEnum >>= succ >>= succ ... succ [cardinality - 1 times] == lastEnum```
     *  | - ```pred lastEnum  >>= pred >>= pred ... pred [cardinality - 1 times] == firstEnum```
     *  | - ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```
     *  | - ```forall a > firstEnum: pred a >>= succ == Just a```
     *  | - ```forall a < lastEnum:  succ a >>= pred == Just a```
     *  | - ```pred >=> succ >=> pred = pred```
     *  | - ```succ >=> pred >=> succ = succ```
     *  | - ```toEnum (fromEnum a) = Just a```
     *  | - ```forall a > firstEnum: fromEnum <$> pred a = Just (fromEnum a - 1)```
     *  | - ```forall a < lastEnum:  fromEnum <$> succ a = Just (fromEnum a + 1)```
     */
    var Enum = function (__superclass_Prelude$dotOrd_0, cardinality, firstEnum, fromEnum, lastEnum, pred, succ, toEnum) {
        this["__superclass_Prelude.Ord_0"] = __superclass_Prelude$dotOrd_0;
        this.cardinality = cardinality;
        this.firstEnum = firstEnum;
        this.fromEnum = fromEnum;
        this.lastEnum = lastEnum;
        this.pred = pred;
        this.succ = succ;
        this.toEnum = toEnum;
    };
    
    /**
     *  | Type class for enumerations. This should not be considered a part of a
     *  | numeric hierarchy, ala Haskell. Rather, this is a type class for small,
     *  | ordered sum types with statically-determined cardinality and the ability 
     *  | to easily compute successor and predecessor elements. e.g. `DayOfWeek`, etc.
     *  |
     *  | Laws:
     *  |
     *  | - ```succ firstEnum >>= succ >>= succ ... succ [cardinality - 1 times] == lastEnum```
     *  | - ```pred lastEnum  >>= pred >>= pred ... pred [cardinality - 1 times] == firstEnum```
     *  | - ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```
     *  | - ```forall a > firstEnum: pred a >>= succ == Just a```
     *  | - ```forall a < lastEnum:  succ a >>= pred == Just a```
     *  | - ```pred >=> succ >=> pred = pred```
     *  | - ```succ >=> pred >=> succ = succ```
     *  | - ```toEnum (fromEnum a) = Just a```
     *  | - ```forall a > firstEnum: fromEnum <$> pred a = Just (fromEnum a - 1)```
     *  | - ```forall a < lastEnum:  fromEnum <$> succ a = Just (fromEnum a + 1)```
     */
    var toEnum = function (dict) {
        return dict.toEnum;
    };
    
    /**
     *  | Type class for enumerations. This should not be considered a part of a
     *  | numeric hierarchy, ala Haskell. Rather, this is a type class for small,
     *  | ordered sum types with statically-determined cardinality and the ability 
     *  | to easily compute successor and predecessor elements. e.g. `DayOfWeek`, etc.
     *  |
     *  | Laws:
     *  |
     *  | - ```succ firstEnum >>= succ >>= succ ... succ [cardinality - 1 times] == lastEnum```
     *  | - ```pred lastEnum  >>= pred >>= pred ... pred [cardinality - 1 times] == firstEnum```
     *  | - ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```
     *  | - ```forall a > firstEnum: pred a >>= succ == Just a```
     *  | - ```forall a < lastEnum:  succ a >>= pred == Just a```
     *  | - ```pred >=> succ >=> pred = pred```
     *  | - ```succ >=> pred >=> succ = succ```
     *  | - ```toEnum (fromEnum a) = Just a```
     *  | - ```forall a > firstEnum: fromEnum <$> pred a = Just (fromEnum a - 1)```
     *  | - ```forall a < lastEnum:  fromEnum <$> succ a = Just (fromEnum a + 1)```
     */
    var succ = function (dict) {
        return dict.succ;
    };
    
    /**
     *  | Property: ```forall e in intStepFromTo step a b: a <= e <= b```
     */
    var intStepFromTo = function (step) {
        return function (from) {
            return function (to) {
                return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(function (e) {
                    var _990 = e <= to;
                    if (_990) {
                        return Data_Maybe.Just.create(new Data_Tuple.Tuple(e, e + step));
                    };
                    if (!_990) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match");
                })(from);
            };
        };
    };
    
    /**
     *  | Property: ```forall e in intFromTo a b: a <= e <= b```
     */
    var intFromTo = intStepFromTo(1);
    
    /**
     *  | Type class for enumerations. This should not be considered a part of a
     *  | numeric hierarchy, ala Haskell. Rather, this is a type class for small,
     *  | ordered sum types with statically-determined cardinality and the ability 
     *  | to easily compute successor and predecessor elements. e.g. `DayOfWeek`, etc.
     *  |
     *  | Laws:
     *  |
     *  | - ```succ firstEnum >>= succ >>= succ ... succ [cardinality - 1 times] == lastEnum```
     *  | - ```pred lastEnum  >>= pred >>= pred ... pred [cardinality - 1 times] == firstEnum```
     *  | - ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```
     *  | - ```forall a > firstEnum: pred a >>= succ == Just a```
     *  | - ```forall a < lastEnum:  succ a >>= pred == Just a```
     *  | - ```pred >=> succ >=> pred = pred```
     *  | - ```succ >=> pred >=> succ = succ```
     *  | - ```toEnum (fromEnum a) = Just a```
     *  | - ```forall a > firstEnum: fromEnum <$> pred a = Just (fromEnum a - 1)```
     *  | - ```forall a < lastEnum:  fromEnum <$> succ a = Just (fromEnum a + 1)```
     */
    var fromEnum = function (dict) {
        return dict.fromEnum;
    };
    
    /**
     *  | Property: ```fromEnum a = a', fromEnum b = b' => forall e', a' <= e' <= b': Exists e: toEnum e' = Just e```
     *  |
     *  | Following from the propery of `intFromTo`, we are sure all elements in `intFromTo (fromEnum a) (fromEnum b)` are `Just`s.
     */
    var enumFromTo = function (__dict_Enum_513) {
        return function (a) {
            return function (b) {
                var b$prime = fromEnum(__dict_Enum_513)(b);
                var a$prime = fromEnum(__dict_Enum_513)(a);
                return Prelude["<$>"](Data_Array.functorArray)(Prelude[">>>"](Prelude.semigroupoidArr)(toEnum(__dict_Enum_513))(Data_Maybe_Unsafe.fromJust))(intFromTo(a$prime)(b$prime));
            };
        };
    };
    
    /**
     *  | ```defaultSucc toEnum fromEnum = succ```
     */
    var defaultSucc = function (toEnum$prime) {
        return function (fromEnum$prime) {
            return function (a) {
                return toEnum$prime(fromEnum$prime(a) + 1);
            };
        };
    };
    
    /**
     *  | ```defaultPred toEnum fromEnum = pred```
     */
    var defaultPred = function (toEnum$prime) {
        return function (fromEnum$prime) {
            return function (a) {
                return toEnum$prime(fromEnum$prime(a) - 1);
            };
        };
    };
    return {
        Cardinality: Cardinality, 
        Enum: Enum, 
        enumFromTo: enumFromTo, 
        intStepFromTo: intStepFromTo, 
        intFromTo: intFromTo, 
        defaultPred: defaultPred, 
        defaultSucc: defaultSucc, 
        toEnum: toEnum, 
        succ: succ, 
        fromEnum: fromEnum
    };
})();
var PS = PS || {};
PS.Data_Date = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Enum = PS.Data_Enum;
    var Global = PS.Global;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Data_Function = PS.Data_Function;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    function jsDateMethod(method) {   return function(date) {     return date[method]();   }; };
    function jsDateConstructor(x) {   return new Date(x); };
    function jsDateFromRecord(r) {  return new Date(r.year, r.month, r.day, r.hours, r.minutes, r.seconds, r.milliseconds); };
    var January = (function () {
        function January() {

        };
        January.value = new January();
        return January;
    })();
    var February = (function () {
        function February() {

        };
        February.value = new February();
        return February;
    })();
    var March = (function () {
        function March() {

        };
        March.value = new March();
        return March;
    })();
    var April = (function () {
        function April() {

        };
        April.value = new April();
        return April;
    })();
    var May = (function () {
        function May() {

        };
        May.value = new May();
        return May;
    })();
    var June = (function () {
        function June() {

        };
        June.value = new June();
        return June;
    })();
    var July = (function () {
        function July() {

        };
        July.value = new July();
        return July;
    })();
    var August = (function () {
        function August() {

        };
        August.value = new August();
        return August;
    })();
    var September = (function () {
        function September() {

        };
        September.value = new September();
        return September;
    })();
    var October = (function () {
        function October() {

        };
        October.value = new October();
        return October;
    })();
    var November = (function () {
        function November() {

        };
        November.value = new November();
        return November;
    })();
    var December = (function () {
        function December() {

        };
        December.value = new December();
        return December;
    })();
    var Sunday = (function () {
        function Sunday() {

        };
        Sunday.value = new Sunday();
        return Sunday;
    })();
    var Monday = (function () {
        function Monday() {

        };
        Monday.value = new Monday();
        return Monday;
    })();
    var Tuesday = (function () {
        function Tuesday() {

        };
        Tuesday.value = new Tuesday();
        return Tuesday;
    })();
    var Wednesday = (function () {
        function Wednesday() {

        };
        Wednesday.value = new Wednesday();
        return Wednesday;
    })();
    var Thursday = (function () {
        function Thursday() {

        };
        Thursday.value = new Thursday();
        return Thursday;
    })();
    var Friday = (function () {
        function Friday() {

        };
        Friday.value = new Friday();
        return Friday;
    })();
    var Saturday = (function () {
        function Saturday() {

        };
        Saturday.value = new Saturday();
        return Saturday;
    })();
    var DateTime = (function () {
        function DateTime(value0) {
            this.value0 = value0;
        };
        DateTime.create = function (value0) {
            return new DateTime(value0);
        };
        return DateTime;
    })();
    var toJSDate = function (_614) {
        return _614.value0;
    };
    var monthToEnum = function (_610) {
        if (_610 === 0) {
            return new Data_Maybe.Just(January.value);
        };
        if (_610 === 1) {
            return new Data_Maybe.Just(February.value);
        };
        if (_610 === 2) {
            return new Data_Maybe.Just(March.value);
        };
        if (_610 === 3) {
            return new Data_Maybe.Just(April.value);
        };
        if (_610 === 4) {
            return new Data_Maybe.Just(May.value);
        };
        if (_610 === 5) {
            return new Data_Maybe.Just(June.value);
        };
        if (_610 === 6) {
            return new Data_Maybe.Just(July.value);
        };
        if (_610 === 7) {
            return new Data_Maybe.Just(August.value);
        };
        if (_610 === 8) {
            return new Data_Maybe.Just(September.value);
        };
        if (_610 === 9) {
            return new Data_Maybe.Just(October.value);
        };
        if (_610 === 10) {
            return new Data_Maybe.Just(November.value);
        };
        if (_610 === 11) {
            return new Data_Maybe.Just(December.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var monthFromEnum = function (_611) {
        if (_611 instanceof January) {
            return 0;
        };
        if (_611 instanceof February) {
            return 1;
        };
        if (_611 instanceof March) {
            return 2;
        };
        if (_611 instanceof April) {
            return 3;
        };
        if (_611 instanceof May) {
            return 4;
        };
        if (_611 instanceof June) {
            return 5;
        };
        if (_611 instanceof July) {
            return 6;
        };
        if (_611 instanceof August) {
            return 7;
        };
        if (_611 instanceof September) {
            return 8;
        };
        if (_611 instanceof October) {
            return 9;
        };
        if (_611 instanceof November) {
            return 10;
        };
        if (_611 instanceof December) {
            return 11;
        };
        throw new Error("Failed pattern match");
    };
    var liftDate = function (_615) {
        return function (_616) {
            return _615(_616.value0);
        };
    };
    var showDate = new Prelude.Show(liftDate(jsDateMethod("toString")));
    var toEpochMilliseconds = liftDate(jsDateMethod("getTime"));
    var liftOp = function (op) {
        return function (x) {
            return function (y) {
                return op(toEpochMilliseconds(x))(toEpochMilliseconds(y));
            };
        };
    };
    var year = liftDate(jsDateMethod("getFullYear"));
    var fromJSDate = function (d) {
        var _998 = Global.isNaN(jsDateMethod("getTime")(d));
        if (_998) {
            return Data_Maybe.Nothing.value;
        };
        if (!_998) {
            return Data_Maybe.Just.create(new DateTime(d));
        };
        throw new Error("Failed pattern match");
    };
    var fromString = Prelude["<<<"](Prelude.semigroupoidArr)(fromJSDate)(jsDateConstructor);
    var fromEpochMilliseconds = Prelude["<<<"](Prelude.semigroupoidArr)(fromJSDate)(jsDateConstructor);
    var eqMonth = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqMonth)(a)(b);
        };
    }, function (_617) {
        return function (_618) {
            if (_617 instanceof January && _618 instanceof January) {
                return true;
            };
            if (_617 instanceof February && _618 instanceof February) {
                return true;
            };
            if (_617 instanceof March && _618 instanceof March) {
                return true;
            };
            if (_617 instanceof April && _618 instanceof April) {
                return true;
            };
            if (_617 instanceof May && _618 instanceof May) {
                return true;
            };
            if (_617 instanceof June && _618 instanceof June) {
                return true;
            };
            if (_617 instanceof July && _618 instanceof July) {
                return true;
            };
            if (_617 instanceof August && _618 instanceof August) {
                return true;
            };
            if (_617 instanceof September && _618 instanceof September) {
                return true;
            };
            if (_617 instanceof October && _618 instanceof October) {
                return true;
            };
            if (_617 instanceof November && _618 instanceof November) {
                return true;
            };
            if (_617 instanceof December && _618 instanceof December) {
                return true;
            };
            return false;
        };
    });
    var eqDayOfWeek = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqDayOfWeek)(a)(b);
        };
    }, function (_620) {
        return function (_621) {
            if (_620 instanceof Sunday && _621 instanceof Sunday) {
                return true;
            };
            if (_620 instanceof Monday && _621 instanceof Monday) {
                return true;
            };
            if (_620 instanceof Tuesday && _621 instanceof Tuesday) {
                return true;
            };
            if (_620 instanceof Wednesday && _621 instanceof Wednesday) {
                return true;
            };
            if (_620 instanceof Thursday && _621 instanceof Thursday) {
                return true;
            };
            if (_620 instanceof Friday && _621 instanceof Friday) {
                return true;
            };
            if (_620 instanceof Saturday && _621 instanceof Saturday) {
                return true;
            };
            return false;
        };
    });
    var eqDate = new Prelude.Eq(liftOp(Prelude["/="](Prelude.eqNumber)), liftOp(Prelude["=="](Prelude.eqNumber)));
    var ordDate = new Prelude.Ord(function () {
        return eqDate;
    }, liftOp(Prelude.compare(Prelude.ordNumber)));
    var ordMonth = new Prelude.Ord(function () {
        return eqMonth;
    }, function (a) {
        return function (b) {
            return Prelude.compare(Prelude.ordNumber)(Data_Enum.fromEnum(enumMonth)(a))(Data_Enum.fromEnum(enumMonth)(b));
        };
    });
    var enumMonth = new Data_Enum.Enum(function () {
        return ordMonth;
    }, 12, January.value, monthFromEnum, December.value, Data_Enum.defaultPred(monthToEnum)(monthFromEnum), Data_Enum.defaultSucc(monthToEnum)(monthFromEnum), monthToEnum);
    var month = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Enum.toEnum(enumMonth))(liftDate(jsDateMethod("getMonth"))));
    var dayOfWeekToEnum = function (_612) {
        if (_612 === 0) {
            return new Data_Maybe.Just(Sunday.value);
        };
        if (_612 === 1) {
            return new Data_Maybe.Just(Monday.value);
        };
        if (_612 === 2) {
            return new Data_Maybe.Just(Tuesday.value);
        };
        if (_612 === 3) {
            return new Data_Maybe.Just(Wednesday.value);
        };
        if (_612 === 4) {
            return new Data_Maybe.Just(Thursday.value);
        };
        if (_612 === 5) {
            return new Data_Maybe.Just(Friday.value);
        };
        if (_612 === 6) {
            return new Data_Maybe.Just(Saturday.value);
        };
        return Data_Maybe.Nothing.value;
    };
    var dayOfWeekFromEnum = function (_613) {
        if (_613 instanceof Sunday) {
            return 0;
        };
        if (_613 instanceof Monday) {
            return 1;
        };
        if (_613 instanceof Tuesday) {
            return 2;
        };
        if (_613 instanceof Wednesday) {
            return 3;
        };
        if (_613 instanceof Thursday) {
            return 4;
        };
        if (_613 instanceof Friday) {
            return 5;
        };
        if (_613 instanceof Saturday) {
            return 6;
        };
        throw new Error("Failed pattern match");
    };
    var ordDayOfWeek = new Prelude.Ord(function () {
        return eqDayOfWeek;
    }, function (a) {
        return function (b) {
            return Prelude.compare(Prelude.ordNumber)(Data_Enum.fromEnum(enumDayOfWeek)(a))(Data_Enum.fromEnum(enumDayOfWeek)(b));
        };
    });
    var enumDayOfWeek = new Data_Enum.Enum(function () {
        return ordDayOfWeek;
    }, 7, Sunday.value, dayOfWeekFromEnum, Saturday.value, Data_Enum.defaultPred(dayOfWeekToEnum)(dayOfWeekFromEnum), Data_Enum.defaultSucc(dayOfWeekToEnum)(dayOfWeekFromEnum), dayOfWeekToEnum);
    var dayOfWeek = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe_Unsafe.fromJust)(Prelude["<<<"](Prelude.semigroupoidArr)(Data_Enum.toEnum(enumDayOfWeek))(liftDate(jsDateMethod("getDay"))));
    var day = liftDate(jsDateMethod("getDate"));
    var dateTime = function (y) {
        return function (m) {
            return function (d) {
                return function (h) {
                    return function (n) {
                        return function (s) {
                            return function (ms) {
                                return fromJSDate(jsDateFromRecord({
                                    year: y, 
                                    month: Data_Enum.fromEnum(enumMonth)(m), 
                                    day: d, 
                                    hours: h, 
                                    minutes: n, 
                                    seconds: s, 
                                    milliseconds: ms
                                }));
                            };
                        };
                    };
                };
            };
        };
    };
    var date = function (y) {
        return function (m) {
            return function (d) {
                return dateTime(y)(m)(d)(0)(0)(0)(0);
            };
        };
    };
    return {
        Sunday: Sunday, 
        Monday: Monday, 
        Tuesday: Tuesday, 
        Wednesday: Wednesday, 
        Thursday: Thursday, 
        Friday: Friday, 
        Saturday: Saturday, 
        January: January, 
        February: February, 
        March: March, 
        April: April, 
        May: May, 
        June: June, 
        July: July, 
        August: August, 
        September: September, 
        October: October, 
        November: November, 
        December: December, 
        fromString: fromString, 
        fromEpochMilliseconds: fromEpochMilliseconds, 
        toEpochMilliseconds: toEpochMilliseconds, 
        dayOfWeek: dayOfWeek, 
        day: day, 
        month: month, 
        year: year, 
        date: date, 
        dateTime: dateTime, 
        toJSDate: toJSDate, 
        fromJSDate: fromJSDate, 
        eqDate: eqDate, 
        ordDate: ordDate, 
        eqMonth: eqMonth, 
        ordMonth: ordMonth, 
        enumMonth: enumMonth, 
        eqDayOfWeek: eqDayOfWeek, 
        ordDayOfWeek: ordDayOfWeek, 
        enumDayOfWeek: enumDayOfWeek, 
        showDate: showDate
    };
})();
var PS = PS || {};
PS.Graphics_D3_Scale = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Graphics_D3_Interpolate = PS.Graphics_D3_Interpolate;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var linearScale = d3.scale.linear;
    
    /**
     *  A base class for all scale types
     */
    var Scale = function (copy, domain, range, toFunction) {
        this.copy = copy;
        this.domain = domain;
        this.range = range;
        this.toFunction = toFunction;
    };
    
    /**
     *  A base class for all scale types
     */
    var toFunction = function (dict) {
        return dict.toFunction;
    };
    
    /**
     *  A base class for all scale types
     */
    var range = function (dict) {
        return dict.range;
    };
    var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
    var unsafeCopy = ffi([ "scale", "" ])("scale.copy()");
    var unsafeDomain = ffi([ "domain", "scale", "" ])("scale.domain(domain)");
    var unsafeRange = ffi([ "values", "scale", "" ])("scale.range(values)");
    var unsafeToFunction = ffi([ "scale", "" ])("scale.copy()");
    
    /**
     *  Scale class instances
     */
    var scaleLinear = new Scale(unsafeCopy, unsafeDomain, unsafeRange, unsafeToFunction);
    
    /**
     *  A base class for all scale types
     */
    var domain = function (dict) {
        return dict.domain;
    };
    return {
        Scale: Scale, 
        toFunction: toFunction, 
        range: range, 
        domain: domain, 
        linearScale: linearScale, 
        scaleLinear: scaleLinear
    };
})();
var PS = PS || {};
PS.Network_XHR_Internal = (function () {
    "use strict";
    var Data_Function = PS.Data_Function;
    var Prelude = PS.Prelude;
    var Network_XHR_Types = PS.Network_XHR_Types;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Data_Maybe = PS.Data_Maybe;
    
function newXMLHttpRequest(){
  return new window.XMLHttpRequest();
};
    
function openImpl (config, xhr) {
  return function () {
    xhr.open(config.method,
            config.url,
            config.async,
            config.user,
            config.password);
  }
};
    
function send (xhr) {
  return function() {
    xhr.send();
  }
};
    
function sendWithBodyImpl (body, xhr) {
  return function() {
    xhr.send(body);
  }
};
    
function getterImpl (prop, xhr) {
  return function () {
    return xhr[prop];
  }
};
    
function setRequestHeaderImpl (header, value, xhr) {
  return function() {
    xhr.setRequestHeader(header, value);
  }
};
    
function setterImpl (prop, v, xhr) {
  return function () {
    xhr[prop] = v;
  }
};
    
function encodeUrlParams (obj) {
  var str = '';
  for (var key in obj) {
    str += key + '=' + encodeURIComponent(obj[key]) + '&';
  }
  return str.slice(0,-1);
};
    var setWithCredentials = Data_Function.runFn3(setterImpl)("withCredentials");
    var setTimeout = Data_Function.runFn3(setterImpl)("timeout");
    var setRequestHeader = Data_Function.runFn3(setRequestHeaderImpl);
    var setOnTimeout = Data_Function.runFn3(setterImpl)("ontimeout");
    var setOnReadyStateChange = Data_Function.runFn3(setterImpl)("onreadystatechange");
    var setOnProgress = Data_Function.runFn3(setterImpl)("onprogress");
    var setOnLoadEnd = Data_Function.runFn3(setterImpl)("onloadend");
    var setOnLoad = Data_Function.runFn3(setterImpl)("onload");
    var setOnError = Data_Function.runFn3(setterImpl)("onerror");
    var setOnAbort = Data_Function.runFn3(setterImpl)("onabort");
    var sendWithBody = Data_Function.runFn2(sendWithBodyImpl);
    var open = Data_Function.runFn2(openImpl);
    var getStatus = Data_Function.runFn2(getterImpl)("status");
    var getResponseText = Data_Function.runFn2(getterImpl)("responseText");
    var getReadyState$prime = Data_Function.runFn2(getterImpl)("readyState");
    var defaultOpenConfig = {
        method: "GET", 
        url: "/", 
        async: true, 
        user: "", 
        password: ""
    };
    return {
        encodeUrlParams: encodeUrlParams, 
        setOnReadyStateChange: setOnReadyStateChange, 
        setOnTimeout: setOnTimeout, 
        setOnProgress: setOnProgress, 
        setOnLoadEnd: setOnLoadEnd, 
        setOnLoad: setOnLoad, 
        setOnError: setOnError, 
        setOnAbort: setOnAbort, 
        setWithCredentials: setWithCredentials, 
        setTimeout: setTimeout, 
        setRequestHeader: setRequestHeader, 
        getStatus: getStatus, 
        getResponseText: getResponseText, 
        "getReadyState'": getReadyState$prime, 
        sendWithBody: sendWithBody, 
        send: send, 
        defaultOpenConfig: defaultOpenConfig, 
        open: open, 
        newXMLHttpRequest: newXMLHttpRequest
    };
})();
var PS = PS || {};
PS.Network_XHR = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Network_XHR_Internal = PS.Network_XHR_Internal;
    var Data_Foldable = PS.Data_Foldable;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var Network_XHR_Types = PS.Network_XHR_Types;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var XHRTask = function (x) {
        return x;
    };
    var Response = function (x) {
        return x;
    };
    var getStatus = function (_636) {
        return Network_XHR_Internal.getStatus(_636);
    };
    var onSuccess = function (_650) {
        return function (_651) {
            return function __do() {
                var _45 = Network_XHR_Internal["getReadyState'"](_651)();
                var _44 = getStatus(_651)();
                return (function () {
                    var _1010 = _45 === 4 && _44 === 200;
                    if (_1010) {
                        return _650(_651);
                    };
                    if (!_1010) {
                        return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                    };
                    throw new Error("Failed pattern match");
                })()();
            };
        };
    };
    var getResponseText = function (_634) {
        return Network_XHR_Internal.getResponseText(_634);
    };
    var defaultAjaxOptions = {
        method: "GET", 
        url: "/", 
        headers: [  ], 
        cache: true, 
        timeout: 0, 
        credentials: false, 
        async: true, 
        user: "", 
        password: "", 
        onAbort: function (_623) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onError: function (_624) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onLoad: function (_625) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onLoadEnd: function (_626) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onProgress: function (_627) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onReadyStateChange: function (_628) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }, 
        onTimeout: function (_629) {
            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
        }
    };
    var ajax = function (conf) {
        return function (params) {
            return function (body) {
                var paramString = Network_XHR_Internal.encodeUrlParams(params);
                var url = (function () {
                    var _1019 = paramString === "";
                    if (_1019) {
                        return conf.url;
                    };
                    if (!_1019) {
                        return conf.url + ("?" + paramString);
                    };
                    throw new Error("Failed pattern match");
                })();
                var openConfig = (function () {
                    var _1020 = {};
                    for (var _1021 in Network_XHR_Internal.defaultOpenConfig) {
                        if (Network_XHR_Internal.defaultOpenConfig.hasOwnProperty(_1021)) {
                            _1020[_1021] = Network_XHR_Internal.defaultOpenConfig[_1021];
                        };
                    };
                    _1020.method = conf.method;
                    _1020.url = url;
                    _1020.async = conf.async;
                    _1020.user = conf.user;
                    _1020.password = conf.password;
                    return _1020;
                })();
                var headers = (function () {
                    if (conf.cache) {
                        return conf.headers;
                    };
                    if (!conf.cache) {
                        return Prelude[":"](new Data_Tuple.Tuple("Pragma", "no-cache"))(Prelude[":"](new Data_Tuple.Tuple("Cache-Control", "no-cache"))(Prelude[":"](new Data_Tuple.Tuple("IF-Modified-Since", "Thu, 01 Jun 1970 00:00:00 GMT"))(conf.headers)));
                    };
                    throw new Error("Failed pattern match");
                })();
                return function __do() {
                    var _38 = Network_XHR_Internal.newXMLHttpRequest();
                    Network_XHR_Internal.open(openConfig)(_38)();
                    (function () {
                        if (conf.async) {
                            return function __do() {
                                Network_XHR_Internal.setTimeout(conf.timeout)(_38)();
                                return Network_XHR_Internal.setWithCredentials(conf.credentials)(_38)();
                            };
                        };
                        if (!conf.async) {
                            return Prelude["return"](Control_Monad_Eff.monadEff)(Prelude.unit);
                        };
                        throw new Error("Failed pattern match");
                    })()();
                    Network_XHR_Internal.setOnAbort(conf.onAbort(_38))(_38)();
                    Network_XHR_Internal.setOnError(conf.onError(_38))(_38)();
                    Network_XHR_Internal.setOnLoad(conf.onLoad(_38))(_38)();
                    Network_XHR_Internal.setOnLoadEnd(conf.onLoadEnd(_38))(_38)();
                    Network_XHR_Internal.setOnProgress(conf.onProgress(_38))(_38)();
                    Network_XHR_Internal.setOnTimeout(conf.onTimeout(_38))(_38)();
                    Network_XHR_Internal.setOnReadyStateChange(conf.onReadyStateChange(_38))(_38)();
                    Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(headers)(function (_630) {
                        return Network_XHR_Internal.setRequestHeader(_630.value0)(_630.value1)(_38);
                    })();
                    (function () {
                        if (body instanceof Network_XHR_Types.NoBody) {
                            return Network_XHR_Internal.send(_38);
                        };
                        if (body instanceof Network_XHR_Types.RawBody) {
                            return Network_XHR_Internal.sendWithBody(body.value0)(_38);
                        };
                        if (body instanceof Network_XHR_Types.UrlEncoded) {
                            return function __do() {
                                Network_XHR_Internal.setRequestHeader("Content-Type")("application/x-www-form-urlencoded")(_38)();
                                return Network_XHR_Internal.sendWithBody(body.value0)(_38)();
                            };
                        };
                        if (body instanceof Network_XHR_Types.Multipart) {
                            return Network_XHR_Internal.sendWithBody(body.value0)(_38);
                        };
                        throw new Error("Failed pattern match");
                    })()();
                    return _38;
                };
            };
        };
    };
    var get = function (c) {
        return function (u) {
            return function (p) {
                return ajax((function () {
                    var _1032 = {};
                    for (var _1033 in c) {
                        if (c.hasOwnProperty(_1033)) {
                            _1032[_1033] = c[_1033];
                        };
                    };
                    _1032.method = "GET";
                    _1032.url = u;
                    return _1032;
                })())(p)(Network_XHR_Types.NoBody.value);
            };
        };
    };
    return {
        onSuccess: onSuccess, 
        get: get, 
        ajax: ajax, 
        defaultAjaxOptions: defaultAjaxOptions, 
        getStatus: getStatus, 
        getResponseText: getResponseText
    };
})();
var PS = PS || {};
PS.CalendarChart_Util = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Global = PS.Global;
    var Data_Foreign = PS.Data_Foreign;
    var Prelude = PS.Prelude;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Graphics_D3_Selection = PS.Graphics_D3_Selection;
    var Graphics_D3_Scale = PS.Graphics_D3_Scale;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Date = PS.Data_Date;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    var DOM_File = PS.DOM_File;
    var Data_Either = PS.Data_Either;
    var Debug_Trace = PS.Debug_Trace;
    var thresholdScale = d3.scale.threshold;
    var selectionFilter$prime = Data_Foreign_EasyFFI.unsafeForeignFunction([ "fn", "selection", "" ])("selection.filter(fn)");
    var parseInt = Global.readInt(10);
    var formatDate = Data_Foreign_EasyFFI.unsafeForeignFunction([ "fmt" ])("d3.time.format(fmt)");
    var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
    var fileAsBlob = ffi([ "file" ])("file");
    var fileReader = ffi([ "" ])("new FileReader()");
    var format = ffi([ "fmt" ])("d3.format(fmt)");
    var nodeFiles = ffi([ "selection" ])("selection.node() !== null ? Array.prototype.slice.call(selection.node().files) : null");
    var getFile = function (sel) {
        var files = nodeFiles(sel);
        var _1034 = Data_Foreign.readArray(files);
        if (_1034 instanceof Data_Either.Right && _1034.value0.length === 1) {
            return Data_Maybe.Just.create(Data_Foreign.unsafeFromForeign(_1034.value0[0]));
        };
        return Data_Maybe.Nothing.value;
    };
    var parseTsv = ffi([ "str" ])("d3.tsv.parse(str)");
    var readAsText = ffi([ "fr", "file", "callback" ])("function() {\n  fr.onloadend = function () {\n    callback(fr.result)();\n  };\n  fr.readAsText(file);\n  return {};\n}");
    var unsafeCopy = ffi([ "scale", "" ])("scale.copy()");
    var unsafeDomain = ffi([ "domain", "scale", "" ])("scale.domain(domain)");
    var unsafeOnEvent = ffi([ "eventName", "callback", "selection", "" ])("selection.on('change', function() { return callback()(); })");
    var onChange = unsafeOnEvent("change");
    var unsafeRange = ffi([ "values", "scale", "" ])("scale.range(values)");
    var unsafeToFunction = ffi([ "scale", "" ])("scale.copy()");
    var scaleThreshold = new Graphics_D3_Scale.Scale(unsafeCopy, unsafeDomain, unsafeRange, unsafeToFunction);
    
    /**
     *  oh dear.
     */
    var callPhantom = Data_Foreign_EasyFFI.unsafeForeignFunction([ "x", "" ])("window.callPhantom && window.callPhantom(x);");
    return {
        callPhantom: callPhantom, 
        readAsText: readAsText, 
        fileAsBlob: fileAsBlob, 
        fileReader: fileReader, 
        getFile: getFile, 
        nodeFiles: nodeFiles, 
        onChange: onChange, 
        unsafeOnEvent: unsafeOnEvent, 
        parseTsv: parseTsv, 
        "selectionFilter'": selectionFilter$prime, 
        thresholdScale: thresholdScale, 
        unsafeToFunction: unsafeToFunction, 
        unsafeCopy: unsafeCopy, 
        unsafeRange: unsafeRange, 
        unsafeDomain: unsafeDomain, 
        parseInt: parseInt, 
        format: format, 
        formatDate: formatDate, 
        ffi: ffi, 
        scaleThreshold: scaleThreshold
    };
})();
var PS = PS || {};
PS.CalendarChart_Activities = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Date = PS.Data_Date;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Array = PS.Data_Array;
    var Data_Map = PS.Data_Map;
    var Data_Enum = PS.Data_Enum;
    var Data_Maybe = PS.Data_Maybe;
    var CalendarChart_Util = PS.CalendarChart_Util;
    var Data_Tuple = PS.Data_Tuple;
    var Run = (function () {
        function Run() {

        };
        Run.value = new Run();
        return Run;
    })();
    var Bike = (function () {
        function Bike() {

        };
        Bike.value = new Bike();
        return Bike;
    })();
    var Other = (function () {
        function Other(value0) {
            this.value0 = value0;
        };
        Other.create = function (value0) {
            return new Other(value0);
        };
        return Other;
    })();
    var Activity = (function () {
        function Activity(value0) {
            this.value0 = value0;
        };
        Activity.create = function (value0) {
            return new Activity(value0);
        };
        return Activity;
    })();
    var weekFormat = CalendarChart_Util.formatDate("%W");
    var week = function (d) {
        return CalendarChart_Util.parseInt(weekFormat(Data_Date.toJSDate(d)));
    };
    var typeEq = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](typeEq)(a)(b);
        };
    }, function (_662) {
        return function (_663) {
            if (_662 instanceof Run && _663 instanceof Run) {
                return true;
            };
            if (_662 instanceof Bike && _663 instanceof Bike) {
                return true;
            };
            if (_662 instanceof Other && _663 instanceof Other) {
                return _662.value0 === _663.value0;
            };
            return false;
        };
    });
    var fullDateFormat = CalendarChart_Util.formatDate("%Y-%m-%d");
    var dayval = function (k) {
        return function (input) {
            var res = Data_Maybe.fromMaybe(0)(Data_Map.lookup(Data_Date.ordDate)(k)(input));
            return res / 1000;
        };
    };
    var dayOf = function (d) {
        return Data_Date.date(Data_Date.year(d))(Data_Date.month(d))(Data_Date.day(d));
    };
    var sameDay = function (_657) {
        return function (_658) {
            return Prelude["=="](Data_Maybe.eqMaybe(Data_Date.eqDate))(dayOf(_657.date))(dayOf(_658.date));
        };
    };
    var dayNumber = function (d) {
        return (Data_Enum.fromEnum(Data_Date.enumDayOfWeek)(d) + 6) % 7;
    };
    var dayAct = function (a) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_0) {
            var _1045 = {};
            for (var _1046 in a) {
                if (a.hasOwnProperty(_1046)) {
                    _1045[_1046] = a[_1046];
                };
            };
            _1045.date = _0;
            return _1045;
        })(dayOf(a.date));
    };
    var combine = function (_659) {
        return function (_660) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(_659)(function (_47) {
                return Prelude[">>="](Data_Maybe.bindMaybe)(dayOf(_47.value0.date))(function (_46) {
                    return Prelude["return"](Data_Maybe.monadMaybe)(Activity.create((function () {
                        var _1051 = {};
                        for (var _1052 in _47.value0) {
                            if (_47.value0.hasOwnProperty(_1052)) {
                                _1051[_1052] = _47.value0[_1052];
                            };
                        };
                        _1051.distance = _47.value0.distance + _660.value0.distance;
                        return _1051;
                    })()));
                });
            });
        };
    };
    var combineA = function (_661) {
        if (_661.length >= 1) {
            var _1061 = _661.slice(1);
            return Data_Foldable.foldlArray(combine)(Prelude["<$>"](Data_Maybe.functorMaybe)(Activity.create)(dayAct((_661[0]).value0)))(_1061);
        };
        if (_661.length === 0) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match");
    };
    var addDays = function (d) {
        return function (n) {
            var milsPerDay = 1000 * 60 * 60 * 24;
            var addDay = function (ms) {
                return ms + milsPerDay * n;
            };
            return Prelude["<$>"](Prelude.functorArr)(Data_Date.fromEpochMilliseconds)(addDay)(Data_Date.toEpochMilliseconds(d));
        };
    };
    var actToTuple = function (_656) {
        return new Data_Tuple.Tuple(_656.value0.date, _656.value0.distance);
    };
    var buildMap = function (acts) {
        var daily = Data_Array.groupBy(function (_655) {
            return function (_654) {
                return sameDay(_655.value0)(_654.value0);
            };
        })(acts);
        var g = Data_Array.mapMaybe(combineA)(daily);
        return Data_Map.fromList(Data_Date.ordDate)(Data_Array.map(actToTuple)(g));
    };
    return {
        Activity: Activity, 
        Run: Run, 
        Bike: Bike, 
        Other: Other, 
        week: week, 
        fullDateFormat: fullDateFormat, 
        weekFormat: weekFormat, 
        addDays: addDays, 
        dayval: dayval, 
        dayNumber: dayNumber, 
        buildMap: buildMap, 
        combineA: combineA, 
        combine: combine, 
        dayAct: dayAct, 
        sameDay: sameDay, 
        actToTuple: actToTuple, 
        dayOf: dayOf, 
        typeEq: typeEq
    };
})();
var PS = PS || {};
PS.CalendarChart_Chart = (function () {
    "use strict";
    var Graphics_D3_Util = PS.Graphics_D3_Util;
    var Graphics_D3_Selection = PS.Graphics_D3_Selection;
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var CalendarChart_Activities = PS.CalendarChart_Activities;
    var Graphics_D3_Scale = PS.Graphics_D3_Scale;
    var Data_Enum = PS.Data_Enum;
    var Data_Date = PS.Data_Date;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Map = PS.Data_Map;
    var Data_Foldable = PS.Data_Foldable;
    var CalendarChart_Util = PS.CalendarChart_Util;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Graphics_D3_Request = PS.Graphics_D3_Request;
    var Graphics_D3_SVG_Axis = PS.Graphics_D3_SVG_Axis;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var yearRange = function (year) {
        var start = Data_Date.date(year)(Data_Date.January.value)(1);
        var yearRange$prime = Data_Maybe.fromMaybe([  ])(Prelude["<*>"](Data_Maybe.applyMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(Data_Array.mapMaybe)(Prelude["<$>"](Data_Maybe.functorMaybe)(CalendarChart_Activities.addDays)(start)))(new Data_Maybe.Just(Data_Array.range(0)(364))));
        return Data_Array.mapMaybe(CalendarChart_Activities.dayOf)(yearRange$prime);
    };
    var selectAll$prime = CalendarChart_Util.ffi([ "selector", "selection", "" ])("selection.selectAll(selector)");
    var monthTotal = function (input) {
        return function (m) {
            var sameMonth = function (d1) {
                return function (d2) {
                    return Data_Date.year(d1) === Data_Date.year(d2) && Prelude["=="](Data_Date.eqMonth)(Data_Date.month(d1))(Data_Date.month(d2));
                };
            };
            var days = Data_Array.filter(sameMonth(m))(Data_Map.keys(input));
            var values = Prelude["<$>"](Data_Array.functorArray)(Prelude.flip(CalendarChart_Activities.dayval)(input))(days);
            return Data_Foldable.sum(Data_Foldable.foldableArray)(values);
        };
    };
    var monday = function (d) {
        var isMonday = function (d_1) {
            return Prelude["=="](Data_Date.eqDayOfWeek)(Data_Date.dayOfWeek(d_1))(Data_Date.Monday.value);
        };
        var days = Data_Array.mapMaybe(CalendarChart_Activities.addDays(d))(Data_Array.range(0)(6));
        return Data_Foldable.find(Data_Foldable.foldableArray)(isMonday)(days);
    };
    var mkSvg = function (__dict_Appendable_531) {
        return function (width) {
            return function (height) {
                return function (margin) {
                    return function (sel) {
                        return Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](sel)(Graphics_D3_Selection.append(__dict_Appendable_531)("svg")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("width")(width + margin.left + margin.right)))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("height")(height + margin.top + margin.bottom)))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("g")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("transform")("translate(" + (Prelude.show(Prelude.showNumber)(margin.left) + ("," + (Prelude.show(Prelude.showNumber)(margin.top) + ")")))));
                    };
                };
            };
        };
    };
    var lastDay = function (year) {
        return function (month) {
            var _1070 = Data_Enum.succ(Data_Date.enumMonth)(month);
            if (_1070 instanceof Data_Maybe.Nothing) {
                return Data_Date.date(year + 1)(Data_Date.January.value)(0);
            };
            if (_1070 instanceof Data_Maybe.Just) {
                return Data_Date.date(year)(_1070.value0)(0);
            };
            throw new Error("Failed pattern match");
        };
    };
    
    /**
     *  0th day is end of last month
     */
    var monthPath = function (year) {
        return function (month) {
            return function (cellSize) {
                return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Date.date(year)(month)(1))(function (_51) {
                    return Prelude[">>="](Data_Maybe.bindMaybe)(lastDay(year)(month))(function (_50) {
                        var day = function (d) {
                            return (Data_Enum.fromEnum(Data_Date.enumDayOfWeek)(Data_Date.dayOfWeek(d)) + 6) % 7;
                        };
                        var w0 = CalendarChart_Activities.week(_51);
                        var w1 = CalendarChart_Activities.week(_50);
                        return Prelude["return"](Data_Maybe.monadMaybe)("M" + (Prelude.show(Prelude.showNumber)((w0 + 1) * cellSize) + ("," + (Prelude.show(Prelude.showNumber)(day(_51) * cellSize) + ("H" + (Prelude.show(Prelude.showNumber)(w0 * cellSize) + ("V" + (Prelude.show(Prelude.showNumber)(7 * cellSize) + ("H" + (Prelude.show(Prelude.showNumber)(w1 * cellSize) + ("V" + (Prelude.show(Prelude.showNumber)((day(_50) + 1) * cellSize) + ("H" + (Prelude.show(Prelude.showNumber)((w1 + 1) * cellSize) + ("V" + (Prelude.show(Prelude.showNumber)(0) + ("H" + (Prelude.show(Prelude.showNumber)((w0 + 1) * cellSize) + "Z"))))))))))))))))));
                    });
                });
            };
        };
    };
    var dayRange = function (start) {
        return function (count) {
            var range = Data_Array.mapMaybe(CalendarChart_Activities.addDays(start))(Data_Array.range(0)(count - 1));
            return Data_Array.mapMaybe(CalendarChart_Activities.dayOf)(range);
        };
    };
    var chartDays = function (input) {
        return function (date) {
            return function (count) {
                var val = Prelude.flip(CalendarChart_Activities.dayval)(input);
                var margin = {
                    top: 0, 
                    right: 0, 
                    bottom: 0, 
                    left: 0
                };
                var width = 70 - margin.left - margin.right;
                var height = 30 - margin.top - margin.bottom;
                var dates = dayRange(date)(count);
                return function __do() {
                    var _49 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Scale.linearScale)(Graphics_D3_Scale.domain(Graphics_D3_Scale.scaleLinear)([ 0, Graphics_D3_Util.max(Prelude.flip(CalendarChart_Activities.dayval)(input))(dates) ])))(Graphics_D3_Scale.range(Graphics_D3_Scale.scaleLinear)([ 0, 30 ])))(Graphics_D3_Scale.toFunction(Graphics_D3_Scale.scaleLinear))();
                    var _48 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.rootSelect("div.weekchart"))(mkSvg(Graphics_D3_Selection.appendableSelection)(width)(height)(margin))();
                    return Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_48)(Graphics_D3_Selection.selectAll("rect")))(Graphics_D3_Selection.bind(dates)))(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("rect")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("width")(8)))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("height")(Prelude["<<<"](Prelude.semigroupoidArr)(_49)(val))))(Graphics_D3_Selection["attr''"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("x")(function (_665) {
                        return function (i) {
                            return i * 10;
                        };
                    })))(Graphics_D3_Selection["attr''"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("y")(function (a) {
                        return function (i) {
                            return 30 - _49(val(a));
                        };
                    })))(Graphics_D3_Selection.style(Graphics_D3_Selection.existingSelection)("fill")("#E7E7E7")))(Graphics_D3_Selection.style(Graphics_D3_Selection.existingSelection)("stroke")("none")))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("title")))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(function (x) {
                        return Prelude.show(Data_Date.showDate)(x) + (": " + Prelude.show(Prelude.showNumber)(val(x)));
                    }))();
                };
            };
        };
    };
    var bind$prime = CalendarChart_Util.ffi([ "fn", "selection", "" ])("selection.data(fn)");
    var monthChart = function (__dict_Appendable_532) {
        return function (input) {
            return function (yearSelect) {
                var margin = {
                    top: 20, 
                    right: 20, 
                    bottom: 2, 
                    left: 20
                };
                var colorClasses = Prelude["<$>"](Data_Array.functorArray)(function (i) {
                    return "q" + Prelude.show(Prelude.showNumber)(i);
                })(Data_Array.range(9)(0));
                var height = 17 * 7;
                return function __do() {
                    var _55 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(CalendarChart_Util.thresholdScale)(Graphics_D3_Scale.domain(CalendarChart_Util.scaleThreshold)([ 5, 10, 15, 20, 25, 30, 40, 50, 70 ])))(Graphics_D3_Scale.range(CalendarChart_Util.scaleThreshold)(colorClasses)))(Graphics_D3_Scale.toFunction(CalendarChart_Util.scaleThreshold))();
                    var _54 = Graphics_D3_Util["..."](yearSelect)(mkSvg(__dict_Appendable_532)(960)(height)(margin))();
                    var _53 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_54)(selectAll$prime("rect.day")))(bind$prime(function (y) {
                        return yearRange(y);
                    }))();
                    var _52 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_53)(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("rect")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("class")("day")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("width")(17)))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("height")(17)))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("y")(function (d) {
                        return CalendarChart_Activities.dayNumber(Data_Date.dayOfWeek(d)) * 17;
                    })))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("x")(function (d) {
                        return CalendarChart_Activities.week(d) * 17;
                    }))();
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_52)(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("title")))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(Prelude.show(Data_Date.showDate)))();
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_54)(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("text")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("class")("yearTitle")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("transform")("translate(-6," + (Prelude.show(Prelude.showNumber)(17 * 3.5) + ")rotate(-90)"))))(Graphics_D3_Selection.style(Graphics_D3_Selection.existingSelection)("text-anchor")("middle")))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(function (d) {
                        return Prelude.show(Prelude.showNumber)(d);
                    }))();
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_54)(selectAll$prime(".monthTotal")))(bind$prime(function (y) {
                        return Data_Array.mapMaybe(function (m) {
                            return Data_Date.date(y)(m)(1);
                        })(Data_Enum.enumFromTo(Data_Date.enumMonth)(Data_Date.January.value)(Data_Date.December.value));
                    })))(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("text")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("class")("monthTotal")))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("x")(function (d) {
                        return Prelude.show(Prelude.showNumber)(Data_Maybe.fromMaybe(0)(Prelude["<$>"](Data_Maybe.functorMaybe)(CalendarChart_Activities.week)(monday(d))) * 17);
                    })))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValNumber)("y")(-5)))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(function (d) {
                        return CalendarChart_Util.formatDate("%b")(Data_Date.toJSDate(d)) + (": " + CalendarChart_Util.format(".0f")(monthTotal(input)(d)));
                    }))();
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_52)(CalendarChart_Util["selectionFilter'"](function (d) {
                        return CalendarChart_Activities.dayval(d)(input) > 0;
                    })))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("class")(function (d) {
                        return "day " + _55(CalendarChart_Activities.dayval(d)(input));
                    })))(Graphics_D3_Selection.select("title")))(Graphics_D3_Selection["text'"](Graphics_D3_Selection.existingSelection)(function (d) {
                        return CalendarChart_Activities.fullDateFormat(Data_Date.toJSDate(d)) + (": " + CalendarChart_Util.format(".1f")(CalendarChart_Activities.dayval(d)(input)));
                    }))();
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_54)(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableSelection)("g")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("transform")("translate(0," + (Prelude.show(Prelude.showNumber)(0) + ")"))))(selectAll$prime(".month")))(bind$prime(function (y) {
                        return Prelude["<$>"](Data_Array.functorArray)(Data_Tuple.Tuple.create(y))(Data_Enum.enumFromTo(Data_Date.enumMonth)(Data_Date.January.value)(Data_Date.December.value));
                    })))(Graphics_D3_Selection.enter))(Graphics_D3_Selection.append(Graphics_D3_Selection.appendableEnter)("path")))(Graphics_D3_Selection.attr(Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("class")("month")))(Graphics_D3_Selection["attr'"](Graphics_D3_Selection.existingSelection)(Graphics_D3_Selection.attrValString)("d")(function (_666) {
                        return Data_Maybe.fromMaybe("")(monthPath(_666.value0)(_666.value1)(17));
                    }))();
                    return _54;
                };
            };
        };
    };
    var monthCharts = function (input) {
        return function (year) {
            return function (count) {
                return function __do() {
                    Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.rootSelect("div.monthchart"))(Graphics_D3_Selection.selectAll("svg")))(Graphics_D3_Selection.remove(Graphics_D3_Selection.existingSelection))();
                    var _56 = Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Selection.rootSelect("div.monthchart"))(Graphics_D3_Selection.selectAll("svg")))(Graphics_D3_Selection.bind(Data_Array.range(year)((year + count) - 1)))();
                    return Graphics_D3_Util[".."](Control_Monad_Eff.bindEff)(Graphics_D3_Util["..."](_56)(Graphics_D3_Selection.enter))(monthChart(Graphics_D3_Selection.appendableEnter)(input))();
                };
            };
        };
    };
    return {
        monthCharts: monthCharts, 
        monthChart: monthChart, 
        "selectAll'": selectAll$prime, 
        "bind'": bind$prime, 
        monday: monday, 
        monthTotal: monthTotal, 
        yearRange: yearRange, 
        monthPath: monthPath, 
        lastDay: lastDay, 
        chartDays: chartDays, 
        dayRange: dayRange, 
        mkSvg: mkSvg
    };
})();
var PS = PS || {};
PS.CalendarChart_RA = (function () {
    "use strict";
    var Data_Foreign_EasyFFI = PS.Data_Foreign_EasyFFI;
    var Prelude = PS.Prelude;
    var Data_Date = PS.Data_Date;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var CalendarChart_Util = PS.CalendarChart_Util;
    var CalendarChart_Activities = PS.CalendarChart_Activities;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var mkActRA = function (input) {
        return Prelude[">>="](Data_Maybe.bindMaybe)((function () {
            if (input.distanceUnit === "Mile") {
                return Data_Maybe.Just.create(1609 * input.distance);
            };
            if (input.distanceUnit === "Meter") {
                return Data_Maybe.Just.create(input.distance);
            };
            return Data_Maybe.Just.create(1000 * input.distance);
        })())(function (_58) {
            return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Date.fromString(input.date))(function (_57) {
                return Prelude["return"](Data_Maybe.monadMaybe)(new CalendarChart_Activities.Activity({
                    date: _57, 
                    distance: _58, 
                    type: CalendarChart_Activities.Run.value
                }));
            });
        });
    };
    var coerceDatum = Data_Foreign_EasyFFI.unsafeForeignFunction([ "x", "" ])("{ distance: Number(x.Distance), distanceUnit: x.DistanceUnit, activityType: x.Type, date: x.Date }");
    var parseRA = function (_667) {
        if (_667 instanceof Data_Either.Right) {
            var parseRA$prime = function (res_1) {
                return Data_Traversable.traverse(Data_Traversable.traversableArray)(Control_Monad_Eff.applicativeEff)(coerceDatum)(res_1);
            };
            return Prelude["<$>"](Control_Monad_Eff.functorEff)(Data_Array.mapMaybe(mkActRA))(parseRA$prime(_667.value0));
        };
        throw new Error("Failed pattern match");
    };
    var getRAfromText = function (str) {
        return parseRA(Data_Either.Right.create(CalendarChart_Util.parseTsv(str)));
    };
    return {
        getRAfromText: getRAfromText, 
        parseRA: parseRA, 
        mkActRA: mkActRA, 
        coerceDatum: coerceDatum
    };
})();
var PS = PS || {};
PS.CalendarChart_Strava = (function () {
    "use strict";
    var Data_Date = PS.Data_Date;
    var Prelude = PS.Prelude;
    var Data_JSON = PS.Data_JSON;
    var Data_Maybe = PS.Data_Maybe;
    var CalendarChart_Activities = PS.CalendarChart_Activities;
    var Data_Either = PS.Data_Either;
    var dateFromJSON = new Data_JSON.FromJSON(function (_668) {
        if (_668 instanceof Data_JSON.JString) {
            var _1091 = Data_Date.fromString(_668.value0);
            if (_1091 instanceof Data_Maybe.Just) {
                return Prelude["return"](Data_Either.monadEither)(_1091.value0);
            };
            if (_1091 instanceof Data_Maybe.Nothing) {
                return Data_JSON.fail("Not date");
            };
            throw new Error("Failed pattern match");
        };
        return Data_JSON.fail("Not string");
    });
    var activityFromJSON = new Data_JSON.FromJSON(function (_669) {
        if (_669 instanceof Data_JSON.JObject) {
            return Prelude[">>="](Data_Either.bindEither)(Data_JSON[".:"](dateFromJSON)(_669.value0)("start_date"))(function (_61) {
                return Prelude[">>="](Data_Either.bindEither)(Data_JSON[".:"](Data_JSON.numberFromJSON)(_669.value0)("distance"))(function (_60) {
                    return Prelude[">>="](Data_Either.bindEither)(Data_JSON[".:"](Data_JSON.stringFromJSON)(_669.value0)("type"))(function (_59) {
                        var cType = (function () {
                            if (_59 === "Run") {
                                return CalendarChart_Activities.Run.value;
                            };
                            if (_59 === "Ride") {
                                return CalendarChart_Activities.Bike.value;
                            };
                            return new CalendarChart_Activities.Other(_59);
                        })();
                        return Prelude["return"](Data_Either.monadEither)(new CalendarChart_Activities.Activity({
                            date: _61, 
                            distance: _60, 
                            type: cType
                        }));
                    });
                });
            });
        };
        return Data_JSON.fail("activity parse failed");
    });
    var getStravaFromText = Prelude["<<<"](Prelude.semigroupoidArr)(Data_Maybe.fromMaybe([  ]))(Data_JSON.decode(Data_JSON.arrayFromJSON(activityFromJSON)));
    return {
        getStravaFromText: getStravaFromText, 
        dateFromJSON: dateFromJSON, 
        activityFromJSON: activityFromJSON
    };
})();
var PS = PS || {};
PS.CalendarChart_Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var CalendarChart_Chart = PS.CalendarChart_Chart;
    var CalendarChart_Activities = PS.CalendarChart_Activities;
    var Network_XHR = PS.Network_XHR;
    var Data_Maybe = PS.Data_Maybe;
    var Data_JSON = PS.Data_JSON;
    var Control_Monad_Trans = PS.Control_Monad_Trans;
    var CalendarChart_RA = PS.CalendarChart_RA;
    var Data_Array = PS.Data_Array;
    var CalendarChart_Util = PS.CalendarChart_Util;
    var Data_Maybe_Unsafe = PS.Data_Maybe_Unsafe;
    var Data_Date = PS.Data_Date;
    var Control_Monad_Cont_Trans = PS.Control_Monad_Cont_Trans;
    var Graphics_D3_Selection = PS.Graphics_D3_Selection;
    var CalendarChart_Strava = PS.CalendarChart_Strava;
    var Graphics_D3_Util = PS.Graphics_D3_Util;
    var Graphics_D3_Base = PS.Graphics_D3_Base;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var getAjax = function (fileName) {
        return Control_Monad_Cont_Trans.ContT(function (cb) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(Network_XHR.get((function () {
                var _1100 = {};
                for (var _1101 in Network_XHR.defaultAjaxOptions) {
                    if (Network_XHR.defaultAjaxOptions.hasOwnProperty(_1101)) {
                        _1100[_1101] = Network_XHR.defaultAjaxOptions[_1101];
                    };
                };
                _1100.onReadyStateChange = Network_XHR.onSuccess(function (response) {
                    return Prelude[">>="](Control_Monad_Eff.bindEff)(Network_XHR.getResponseText(response))(cb);
                });
                return _1100;
            })())(fileName)({}));
        });
    };
    var fetchCont = function (chartf) {
        return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(getAjax("data/activities.json"))(function (_64) {
            var vals = Data_Maybe.fromMaybe([  ])(Data_JSON.decode(Data_JSON.arrayFromJSON(CalendarChart_Strava.activityFromJSON))(_64));
            return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(getAjax("data/log.txt"))(function (_63) {
                return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(Control_Monad_Cont_Trans.monadTransContT)(Control_Monad_Eff.monadEff)(CalendarChart_RA.getRAfromText(_63)))(function (_62) {
                    var acts = Data_Array.filter(function (_670) {
                        return Prelude["=="](CalendarChart_Activities.typeEq)(_670.value0.type)(CalendarChart_Activities.Run.value);
                    })(Prelude["++"](Data_Array.semigroupArray)(vals)(_62));
                    return Prelude[">>="](Control_Monad_Cont_Trans.bindContT(Control_Monad_Eff.monadEff))(Control_Monad_Trans.lift(Control_Monad_Cont_Trans.monadTransContT)(Control_Monad_Eff.monadEff)(chartf(acts)))(function () {
                        return Prelude["return"](Control_Monad_Cont_Trans.monadContT(Control_Monad_Eff.monadEff))(CalendarChart_Util.callPhantom(false));
                    });
                });
            });
        });
    };
    var chartWeek = function (date) {
        return function (x) {
            return Prelude["void"](Control_Monad_Eff.functorEff)(CalendarChart_Chart.chartDays(CalendarChart_Activities.buildMap(x))(date)(7));
        };
    };
    var mainWeek1 = function (jsd) {
        var dt = Data_Maybe_Unsafe.fromJust(Data_Date.fromJSDate(jsd));
        return fetchCont(chartWeek(dt));
    };
    
    /**
     * lift $ void $ trace "hello"
     */
    var mainWeek = function (jsd) {
        return Control_Monad_Cont_Trans.runContT(mainWeek1(jsd))(Prelude["void"](Control_Monad_Eff.functorEff));
    };
    var chartMonths = function (x) {
        return Prelude["void"](Control_Monad_Eff.functorEff)(CalendarChart_Chart.monthCharts(CalendarChart_Activities.buildMap(x))(2014)(2));
    };
    
    /**
     * mainWeekW jsd = mainWeek jsd (trace "goodbye")
     */
    var mainMonths = Control_Monad_Cont_Trans.runContT(fetchCont(chartMonths))(Prelude["void"](Control_Monad_Eff.functorEff));
    var main = mainMonths;
    var chart = Prelude["<<<"](Prelude.semigroupoidArr)(chartMonths)(Data_Array.filter(function (_671) {
        return Prelude["=="](CalendarChart_Activities.typeEq)(_671.value0.type)(CalendarChart_Activities.Run.value);
    }));
    var changeCallback = function (rs) {
        return function (cb) {
            return function (i) {
                var fr = CalendarChart_Util.fileReader(Prelude.unit);
                var _1109 = CalendarChart_Util.getFile(rs);
                if (_1109 instanceof Data_Maybe.Nothing) {
                    return cb("");
                };
                if (_1109 instanceof Data_Maybe.Just) {
                    return CalendarChart_Util.readAsText(fr)(CalendarChart_Util.fileAsBlob(_1109.value0))(cb);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var mainInteractive = function __do() {
        var _67 = Graphics_D3_Selection.rootSelect("input#upload_ra")();
        var _66 = Graphics_D3_Selection.rootSelect("input#upload_strava")();
        return (function () {
            var cb = changeCallback(_66)(function (str) {
                return changeCallback(_67)(function (str2) {
                    return function __do() {
                        var _65 = CalendarChart_RA.getRAfromText(str2)();
                        return (function () {
                            var sa = CalendarChart_Strava.getStravaFromText(str);
                            return chart(Prelude["++"](Data_Array.semigroupArray)(_65)(sa));
                        })()();
                    };
                })(Prelude.unit);
            });
            return function __do() {
                Graphics_D3_Util["..."](_67)(CalendarChart_Util.onChange(cb))();
                Graphics_D3_Util["..."](_66)(CalendarChart_Util.onChange(cb))();
                return _67;
            };
        })()();
    };
    return {
        main: main, 
        mainInteractive: mainInteractive, 
        changeCallback: changeCallback, 
        chart: chart, 
        mainMonths: mainMonths, 
        mainWeek: mainWeek, 
        mainWeek1: mainWeek1, 
        fetchCont: fetchCont, 
        getAjax: getAjax, 
        chartWeek: chartWeek, 
        chartMonths: chartMonths
    };
})();
